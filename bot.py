import os
import csv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)

# === üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

ADMIN_ID = os.getenv("ADMIN_ID")
if not ADMIN_ID:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
ADMIN_ID = int(ADMIN_ID)

# === –≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
NICK, ROLE, RANK, OP_GG, DISCORD = range(5)

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: —ç—Ç–∞–ø—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===
EDIT_NAME, EDIT_DATE = 100, 101
ADD_KEY, ADD_NAME, ADD_DATE = 200, 201, 202

# === –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ ===
teams = {'A': [], 'B': []}

# === –§–∞–π–ª—ã ===
PARTICIPANTS_FILE = "participants.csv"
TOURNAMENTS_FILE = "tournaments.csv"

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu_keyboard = [
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üèÜ –ù–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã", "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    ["üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"]
]
reply_menu = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

# === –ú–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
tournaments_menu = [
    ["üèÜ –ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤"],
    ["üé≤ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º"],
    ["üí• –ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞"],
    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
]
tournaments_markup = ReplyKeyboardMarkup(tournaments_menu, resize_keyboard=True)

# === –ú–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
registered_menu = [
    ["üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"],
    ["üèÜ –ù–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã", "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    ["üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"]
]
edit_menu = ReplyKeyboardMarkup(registered_menu, resize_keyboard=True)

# === –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞ ===
admin_menu = [
    ["‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
]
admin_reply = ReplyKeyboardMarkup(admin_menu, resize_keyboard=True)

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ===
def init_files():
    if not os.path.exists(PARTICIPANTS_FILE):
        with open(PARTICIPANTS_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])
        print("üìÅ –§–∞–π–ª participants.csv —Å–æ–∑–¥–∞–Ω")

    if not os.path.exists(TOURNAMENTS_FILE):
        with open(TOURNAMENTS_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["key", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞"])
            writer.writerow(["regions", "–ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤", "26 –∏—é–ª—è 2025, 18:00"])
            writer.writerow(["random", "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º", "27 –∏—é–ª—è 2025, 18:00"])
            writer.writerow(["brawl", "–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞", "28 –∏—é–ª—è 2025, 18:00"])
        print("üìÅ –§–∞–π–ª tournaments.csv —Å–æ–∑–¥–∞–Ω")

# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=admin_reply)
    else:
        if is_registered(update.effective_user.id):
            await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=edit_menu)
        else:
            await update.message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=reply_menu)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ===
def is_registered(user_id):
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) > 0 and row[0] == str(user_id):
                    return True
        return False
    except FileNotFoundError:
        return False

# === –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ===
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if is_registered(user_id):
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?", reply_markup=ReplyKeyboardMarkup([["üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"], ["‚ùå –û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return ROLE  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ç–∞–ø
    else:
        context.user_data['roles'] = []
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:", reply_markup=None)
        return NICK

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
async def handle_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        context.user_data.clear()
        context.user_data['roles'] = []
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:")
        return NICK
    else:
        await update.message.reply_text("–•–æ—Ä–æ—à–æ.", reply_markup=edit_menu if is_registered(update.effective_user.id) else reply_menu)
        return ConversationHandler.END

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞ ===
async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nick'] = update.message.text
    role_keyboard = [
        ["üõ°Ô∏è –¢–æ–ø", "üå≤ –î–∂–∞–Ω–≥–ª"],
        ["üåÄ –ú–∏–¥", "üèπ ADC"],
        ["üßô –°–∞–ø–ø–æ—Ä—Ç"],
        ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
    ]
    markup = ReplyKeyboardMarkup(role_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤—Å–µ —Ä–æ–ª–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –∏–≥—Ä–∞–µ—à—å.\n"
        "–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=markup
    )
    return ROLE

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π ===
async def get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if 'roles' not in context.user_
        context.user_data['roles'] = []

    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data['roles']:
            await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE

        rank_keyboard = [
            ["ü•â Bronze", "ü•à Silver"],
            ["ü•á Gold", "üíé Platinum"],
            ["üü© Emerald", "üî∑ Diamond"],
            ["‚≠ê Master", "üëë Grandmaster", "üèÜ Challenger"]
        ]
        markup = ReplyKeyboardMarkup(rank_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–Ω–≥:", reply_markup=markup)
        return RANK

    else:
        role = text.split(' ', 1)[-1]
        if role not in context.user_data['roles']:
            context.user_data['roles'].append(role)
            await update.message.reply_text(f"‚ûï –†–æ–ª—å '{role}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"‚úîÔ∏è –†–æ–ª—å '{role}' —É–∂–µ –µ—Å—Ç—å.")
        return ROLE

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ ===
async def get_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_text = update.message.text
    rank = raw_text.split(' ', 1)[-1]
    context.user_data['rank'] = rank
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Op.gg:")
    return OP_GG

# === –ü–æ–ª—É—á–µ–Ω–∏–µ Op.gg ===
async def get_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['opgg'] = update.message.text
    await update.message.reply_text("–í–∞—à Discord (—Ç–æ–ª—å–∫–æ –Ω–∏–∫, –±–µ–∑ #):")
    return DISCORD

# === –ü–æ–ª—É—á–µ–Ω–∏–µ Discord –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
async def get_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    discord_nick = update.message.text.strip().split('#')[0]
    context.user_data['discord'] = discord_nick

    nick = context.user_data['nick']
    roles = ", ".join(context.user_data['roles'])
    rank = context.user_data['rank']
    opgg = context.user_data['opgg']
    user_id = update.effective_user.id
    time = datetime.now().strftime("%Y-%m-%d %H:%M")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    rows = []
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) > 0 and row[0] == str(user_id):
                    continue
                rows.append(row)
    except FileNotFoundError:
        pass

    rows.append([user_id, nick, roles, rank, opgg, discord_nick, time])

    with open(PARTICIPANTS_FILE, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])
        writer.writerows(rows)

    action = "–æ–±–Ω–æ–≤–ª–µ–Ω" if is_registered(user_id) else "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    await update.message.reply_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ, {nick}! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å {action}.\n"
        "–°–ø–∞—Å–∏–±–æ!",
        reply_markup=edit_menu
    )
    return ConversationHandler.END

# === –ö–Ω–æ–ø–∫–∞ "–ù–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã" ===
async def show_tournaments_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìã <b>–ù–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã</b>:\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç.",
        reply_markup=tournaments_markup,
        parse_mode="HTML"
    )

# === –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞) ===
async def show_rules_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_menu = [
        ["üèÜ –ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤"],
        ["üé≤ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º"],
        ["üí• –ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]
    markup = ReplyKeyboardMarkup(rules_menu, resize_keyboard=True)
    await update.message.reply_text(
        "üìú <b>–í—ã–±–µ—Ä–∏ —Ç—É—Ä–Ω–∏—Ä, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

# === –ü–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def rules_regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üèÜ –ë–ò–¢–í–ê –†–ï–ì–ò–û–ù–û–í\n\n"
        "1. <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: Best of Five (Bo5) ‚Äî –ø–æ–±–µ–¥–∞ –∑–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π, –≤—ã–∏–≥—Ä–∞–≤—à–µ–π 3 –∏–≥—Ä—ã.\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: 2 –ø–æ 5 —á–µ–ª–æ–≤–µ–∫.\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è –∏–≥—Ä–∞ ‚Äî —Å —á–µ–º–ø–∏–æ–Ω–∞–º–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.\n"
        "‚Ä¢ –ë–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
        "‚Ä¢ –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ä–µ–≥–∏–æ–Ω –Ω–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å –¥–≤–∞–∂–¥—ã.\n\n"
        
        "2. <b>–í—ã–±–æ—Ä —á–µ–º–ø–∏–æ–Ω–æ–≤</b>\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ —á–µ–º–ø–∏–æ–Ω—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä: –î–µ–º–∞—Ü–∏—è ‚Üí —Ç–æ–ª—å–∫–æ –¥–µ–º–∞—Å–∏–π—Ü—ã.\n\n"
        
        "3. <b>–ü–æ—Ä—è–¥–æ–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞</b>\n"
        "‚Ä¢ –ñ–µ—Ä–µ–±—å—ë–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—ã–º.\n"
        "‚Ä¢ –ü—Ä–∞–≤–æ –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–¥—É–µ—Ç—Å—è.\n\n"
        
        "4. <b>–°–ø–æ—Ä–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏</b>\n"
        "‚Ä¢ –†–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã.\n\n"
        
        "üí° –°–æ–≤–µ—Ç: –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —á–µ–º–ø–∏–æ–Ω–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤!",
        parse_mode="HTML",
        reply_markup=tournaments_markup
    )

async def rules_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üé≤ –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –†–ê–ù–î–û–ú\n\n"
        "1. <b>–û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã</b>\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç: 5v5, Bo5 (–¥–æ 3 –ø–æ–±–µ–¥).\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω—ã –ø–æ MMR.\n"
        "‚Ä¢ –¶–µ–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤–µ—Å–µ–ª—å–µ.\n\n"
        
        "2. <b>–°–∏—Å—Ç–µ–º–∞ —Å–º–µ—â–µ–Ω–∏—è —Ä–æ–ª–µ–π</b>\n"
        "‚Ä¢ –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã: –¢–æ–ø ‚Üí –î–∂–∞–Ω–≥–ª ‚Üí –ú–∏–¥ ‚Üí ADC ‚Üí –°–∞–ø–ø–æ—Ä—Ç ‚Üí –¢–æ–ø...\n\n"
        
        "3. <b>–†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è —á–µ–º–ø–∏–æ–Ω–æ–≤</b>\n"
        "‚Ä¢ Random Draft ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä.\n"
        "‚Ä¢ –ë–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n"
        
        "4. <b>–ó–∞–º–µ–Ω—ã</b>\n"
        "‚Ä¢ –¢–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ.\n\n"
        
        "5. <b>–°–ø–æ—Ä—ã</b>\n"
        "‚Ä¢ –†–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã.\n\n"
        
        "üí° –≠—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä ‚Äî –ø—Ä–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤–µ—Å–µ–ª—å–µ!",
        parse_mode="HTML",
        reply_markup=tournaments_markup
    )

async def rules_brawl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí• –ì–†–ê–ù–î–ò–û–ó–ù–ê–Ø –ü–û–ë–û–ò–©–ù–ê–Ø –¢–£–°–û–í–ö–ê\n\n"
        "1. <b>–§–æ—Ä–º–∞—Ç</b>\n"
        "‚Ä¢ Best of Five (Bo5), –ø–æ–±–µ–¥–∞ ‚Äî –≤ 3 –∏–≥—Ä–∞—Ö.\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã: 2 –ø–æ 5 —á–µ–ª–æ–≤–µ–∫.\n\n"
        
        "2. <b>–î—Ä–∞—Ñ—Ç –∏ –±–∞–Ω—ã</b>\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∏—Ç –ø–æ 5 —á–µ–º–ø–∏–æ–Ω–æ–≤ (–≤—Å–µ–≥–æ 10).\n"
        "‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ —á–µ–º–ø–∏–æ–Ω—ã –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–º.\n\n"
        
        "3. <b>–§–æ—Ä–º–∞—Ç –º–∞—Ç—á–µ–π</b>\n"
        "‚Ä¢ –ö–∞—Ä—Ç–∞: Summoner's Rift.\n"
        "‚Ä¢ –°—Ç–æ—Ä–æ–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã.\n"
        "‚Ä¢ –ü–µ—Ä–µ—Ä—ã–≤: 5 –º–∏–Ω—É—Ç.\n\n"
        
        "4. <b>–°–ø–æ—Ä—ã</b>\n"
        "‚Ä¢ –†–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã. –†–µ—à–µ–Ω–∏–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ.\n\n"
        
        "üî• –ì–æ—Ç–æ–≤—å—Å—è –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –±–∏—Ç–≤–µ!",
        parse_mode="HTML",
        reply_markup=tournaments_markup
    )

# === –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
        if len(rows) <= 1:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=reply_menu)
            return
        message = f"üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(rows) - 1}</b>:\n\n"
        for i, row in enumerate(rows[1:], start=1):
            if len(row) < 7: continue
            nick = row[1].strip('"')
            roles = row[2].strip('"')
            rank = row[3].strip('"')
            opgg = row[4].strip('"')
            discord = row[5].strip('"')
            url = opgg if (opgg.startswith('http') or opgg.startswith('https')) else f"https://op.gg/summoners/{opgg.strip().replace(' ', '%20')}"
            message += (
                f"{i}. üîπ <b>{nick}</b>\n"
                f"   ‚Ä¢ –†–æ–ª–∏: {roles}\n"
                f"   ‚Ä¢ –†–∞–Ω–≥: {rank}\n"
                f'   ‚Ä¢ <a href="{url}">üéÆ Op.gg</a>\n'
                f"   ‚Ä¢ üí¨ Discord: <code>{discord}</code>\n\n"
            )
        await update.message.reply_html(message, disable_web_page_preview=True, reply_markup=reply_menu)
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_menu)

# === –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è ‚Äî –∏–∑ —Ñ–∞–π–ª–∞ ===
async def show_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(TOURNAMENTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
        if len(rows) <= 1:
            await update.message.reply_text("üìÖ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.", reply_markup=reply_menu)
            return
        message = "<b>üóì –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
        for row in rows[1:]:
            if len(row) >= 3:
                name = row[1].strip()
                date = row[2].strip()
                message += f"üî∏ <b>{name}</b>: {date}\n"
        await update.message.reply_html(message, reply_markup=reply_menu)
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –§–∞–π–ª tournaments.csv –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_menu)

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")
        return

    buttons = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="edit_tournament")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="clear_participants")]
    ]
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(buttons))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π ===
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "edit_tournament":
        rows = []
        try:
            with open(TOURNAMENTS_FILE, 'r', encoding='utf-8') as f:
                reader = csv.reader(f)
                rows = list(reader)
            buttons = []
            for row in rows[1:]:
                if len(row) >= 2:
                    key, name = row[0], row[1]
                    buttons.append([
                        InlineKeyboardButton(f"‚úèÔ∏è {name}", callback_data=f"edit:{key}")
                    ])
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(buttons))
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

    elif query.data == "clear_participants":
        try:
            with open(PARTICIPANTS_FILE, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])
            await query.message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–æ–≥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.", reply_markup=reply_menu)
        except Exception as e:
            await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

    elif query.data.startswith("edit:"):
        key = query.data.split(":", 1)[1]
        context.user_data["edit_key"] = key
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
        return EDIT_NAME

    elif query.data.startswith("edit_date:"):
        key = query.data.split(":", 1)[1]
        context.user_data["edit_key"] = key
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:")
        return EDIT_DATE

# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ===
async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_key"]
    new_name = update.message.text.strip()
    rows = []
    try:
        with open(TOURNAMENTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) > 0 and row[0] == key:
                    row[1] = new_name
                rows.append(row)
        with open(TOURNAMENTS_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerows(rows)
        await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:")
        return EDIT_DATE
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def edit_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_key"]
    new_date = update.message.text.strip()
    rows = []
    try:
        with open(TOURNAMETS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) > 0 and row[0] == key:
                    row[2] = new_date
                rows.append(row)
        with open(TOURNAMENTS_FILE, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerows(rows)
        await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=reply_menu)
        return ConversationHandler.END
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

# === –î—Ä–∞—Ñ—Ç –∫–æ–º–∞–Ω–¥ ===
async def get_participants_list():
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
        return [{"id": row[0], "nick": row[1].strip('"')} for row in rows[1:] if len(row) > 1]
    except FileNotFoundError:
        return []

async def draft_teams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä.")
        return
    participants = await get_participants_list()
    if not participants:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    teams['A'].clear()
    teams['B'].clear()
    keyboard = [
        [InlineKeyboardButton("A", callback_data=f"team_a:{p['id']}:{p['nick']}"),
         InlineKeyboardButton("B", callback_data=f"team_b:{p['id']}:{p['nick']}")]
        for p in participants
    ]
    await update.message.reply_text(
        "üìã –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split(":", 2)
    if len(data) != 3: return
    team_key, user_id, nick = data
    team_name = 'A' if 'a' in team_key else 'B'
    if nick in teams['A'] or nick in teams['B']:
        await query.edit_message_text(text=f"‚ö†Ô∏è {nick} —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ!")
        return
    teams[team_name].append(nick)
    await query.edit_message_text(text=f"‚úÖ {nick} –≤ Team {team_name}")

async def show_teams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_a = "\n".join([f"‚Ä¢ {p}" for p in teams['A']]) if teams['A'] else "–ü—É—Å—Ç–æ"
    msg_b = "\n".join([f"‚Ä¢ {p}" for p in teams['B']]) if teams['B'] else "–ü—É—Å—Ç–æ"
    await update.message.reply_text(
        f"<b>üìã –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥:</b>\n\n<b>Team A</b>:\n{msg_a}\n\n<b>Team B</b>:\n{msg_b}",
        parse_mode="HTML"
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    init_files()
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^(üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è|üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)$"), register_start)],
        states={
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nick)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_choice)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rank)],
            OP_GG: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_opgg)],
            DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_discord)],
        },
        fallbacks=[]
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏
    admin_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$"), admin_panel)],
        states={
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
            EDIT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_date)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üèÜ –ù–∞—à–∏ —Ç—É—Ä–Ω–∏—Ä—ã$"), show_tournaments_menu))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_rules_menu))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üèÜ –ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤$"), rules_regions))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üé≤ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º$"), rules_random))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üí• –ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞$"), rules_brawl))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$"), show_participants))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è$"), show_dates))
    app.add_handler(admin_conv)
    app.add_handler(CallbackQueryHandler(admin_callback))
    app.add_handler(CommandHandler("draft", draft_teams))
    app.add_handler(CommandHandler("teams", show_teams))
    app.add_handler(CallbackQueryHandler(button_click))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
