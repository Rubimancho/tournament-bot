import csv
import os
from datetime import datetime
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ConversationHandler, ContextTypes
)

# === üîë –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù –ò ADMIN ID ===
TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
ADMIN_ID = 123456789  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

# === üìÅ CSV-—Ñ–∞–π–ª ===
CSV_FILE = "participants.csv"

# === üìã –¢—É—Ä–Ω–∏—Ä—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –ø—Ä–∞–≤–∏–ª–∞ ===
tournaments = {
    "regions": {
        "name": "–ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤",
        "date": "26 –∏—é–ª—è 2025, 18:00",
        "rules": "üèÜ –ë–ò–¢–í–ê –†–ï–ì–ò–û–ù–û–í\n1. Bo5. –ö–æ–º–∞–Ω–¥—ã: 5x5. –ë–µ–∑ –±–∞–Ω–æ–≤."
    },
    "random": {
        "name": "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º",
        "date": "27 –∏—é–ª—è 2025, 18:00",
        "rules": "üé≤ –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –†–ê–ù–î–û–ú\n1. Bo5. –†–∞–Ω–¥–æ–º –ø–æ MMR. –ü–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—è—é—Ç—Å—è."
    },
    "brawl": {
        "name": "–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞",
        "date": "28 –∏—é–ª—è 2025, 18:00",
        "rules": "üí• –ì–†–ê–ù–î–ò–û–ó–ù–ê–Ø –¢–£–°–û–í–ö–ê\n1. Bo5. 5 –±–∞–Ω–æ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥—É. Rift."
    }
}

# === üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
NICK, ROLE, RANK, OP_GG, DISCORD = range(5)

main_keyboard = ReplyKeyboardMarkup([
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    ["üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤", "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"]
], resize_keyboard=True)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º:")
    return NICK

async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nick"] = update.message.text
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (—Ç–æ–ø, –º–∏–¥, —Å–∞–ø–ø–æ—Ä—Ç –∏ —Ç.–ø.):")
    return ROLE

async def get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["role"] = update.message.text
    await update.message.reply_text("–í–∞—à —Ä–∞–Ω–≥:")
    return RANK

async def get_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rank"] = update.message.text
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å Op.gg:")
    return OP_GG

async def get_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["opgg"] = update.message.text
    await update.message.reply_text("–í–∞—à Discord:")
    return DISCORD

async def get_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["discord"] = update.message.text
    user = context.user_data
    time = datetime.now().strftime("%Y-%m-%d %H:%M")

    with open(CSV_FILE, "a", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([update.effective_user.id, user["nick"], user["role"], user["rank"], user["opgg"], user["discord"], time])

    await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=main_keyboard)
    return ConversationHandler.END

# === –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_keyboard)
    return ConversationHandler.END

# === –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(CSV_FILE):
        await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return

    with open(CSV_FILE, "r", encoding='utf-8') as f:
        reader = list(csv.reader(f))

    if len(reader) <= 0:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return

    msg = f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(reader)}\n\n"
    for i, row in enumerate(reader, 1):
        msg += f"{i}. {row[1]} ({row[2]}) | {row[3]}\n"

    await update.message.reply_text(msg)

# === –ü—Ä–∞–≤–∏–ª–∞ ===
async def rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = ""
    for key, t in tournaments.items():
        msg += f"<b>{t['name']}</b>\n{t['rules']}\n\n"
    await update.message.reply_html(msg)

# === –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìÖ <b>–î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤</b>:\n\n"
    for t in tournaments.values():
        msg += f"üîπ <b>{t['name']}</b>: {t['date']}\n"
    await update.message.reply_html(msg)

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    buttons = [
        [InlineKeyboardButton(t["name"], callback_data=f"edit:{key}")]
        for key, t in tournaments.items()
    ] + [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="add")]]
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=InlineKeyboardMarkup(buttons))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ===
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("edit:"):
        key = data.split(":")[1]
        context.user_data["edit_tournament"] = key
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
        return 100

    elif data == "add":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞:")
        return 200

    return ConversationHandler.END

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ ===
async def update_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_tournament"]
    tournaments[key]["name"] = update.message.text
    await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {update.message.text}")
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:")
    return 101

async def update_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_tournament"]
    tournaments[key]["date"] = update.message.text
    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {update.message.text}")
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:")
    return 102

async def update_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_tournament"]
    tournaments[key]["rules"] = update.message.text
    await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    return ConversationHandler.END

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ ===
async def add_tournament_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = update.message.text.strip()
    if key in tournaments:
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–π –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å.")
        return ConversationHandler.END
    context.user_data["new_tournament"] = key
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return 201

async def add_tournament_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞:")
    return 202

async def add_tournament_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_date"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞:")
    return 203

async def add_tournament_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["new_tournament"]
    tournaments[key] = {
        "name": context.user_data["new_name"],
        "date": context.user_data["new_date"],
        "rules": update.message.text
    }
    await update.message.reply_text(f"‚úÖ –¢—É—Ä–Ω–∏—Ä ¬´{context.user_data['new_name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.")
    return ConversationHandler.END

# === –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /delete 123456789 ===
async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
        return

    if not context.args:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /delete user_id")
        return

    target_id = context.args[0]
    updated = []
    removed = False

    if os.path.exists(CSV_FILE):
        with open(CSV_FILE, "r", encoding='utf-8') as f:
            reader = csv.reader(f)
            for row in reader:
                if row and row[0] != target_id:
                    updated.append(row)
                else:
                    removed = True

        with open(CSV_FILE, "w", newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerows(updated)

    await update.message.reply_text("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω." if removed else "–ù–µ –Ω–∞–π–¥–µ–Ω.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    reg_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$"), register_start)],
        states={
            NICK: [MessageHandler(filters.TEXT, get_nick)],
            ROLE: [MessageHandler(filters.TEXT, get_role)],
            RANK: [MessageHandler(filters.TEXT, get_rank)],
            OP_GG: [MessageHandler(filters.TEXT, get_opgg)],
            DISCORD: [MessageHandler(filters.TEXT, get_discord)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_callback)],
        states={
            100: [MessageHandler(filters.TEXT, update_name)],
            101: [MessageHandler(filters.TEXT, update_date)],
            102: [MessageHandler(filters.TEXT, update_rules)],
            200: [MessageHandler(filters.TEXT, add_tournament_key)],
            201: [MessageHandler(filters.TEXT, add_tournament_name)],
            202: [MessageHandler(filters.TEXT, add_tournament_date)],
            203: [MessageHandler(filters.TEXT, add_tournament_rules)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(reg_handler)
    app.add_handler(MessageHandler(filters.Regex("^üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$"), participants))
    app.add_handler(MessageHandler(filters.Regex("^üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), rules))
    app.add_handler(MessageHandler(filters.Regex("^üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), dates))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(admin_conv)
    app.add_handler(CallbackQueryHandler(admin_callback))
    app.add_handler(CommandHandler("delete", delete_user))

    # –§–∞–π–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if not os.path.exists(CSV_FILE):
        with open(CSV_FILE, "w", newline='', encoding='utf-8') as f:
            pass

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()
