```python
import os
import csv
from datetime import datetime
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes
)

# === üîê –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå –ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")
if not ADMIN_ID:
    raise RuntimeError("‚ùå –ù–µ –∑–∞–¥–∞–Ω ADMIN_ID")
ADMIN_ID = int(ADMIN_ID)

# === –ü—É—Ç–∏ –∫ CSV-—Ñ–∞–π–ª–∞–º ===
PARTICIPANTS_FILE = "participants.csv"
TOURNAMENTS_FILE  = "tournaments.csv"

# === –≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
NICK, ROLE, RANK, OPGG, DISCORD = range(5)

# === –≠—Ç–∞–ø—ã –∞–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª–∏ ===
EDIT_NAME, EDIT_DATE = 100, 101
ADD_KEY, ADD_NAME, ADD_DATE, ADD_RULES = 200, 201, 202, 203

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
MAIN_KB = ReplyKeyboardMarkup([
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"],
    ["üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
], resize_keyboard=True)

ROLES_KB = ReplyKeyboardMarkup([
    ["üõ°Ô∏è –¢–æ–ø","üå≤ –î–∂–∞–Ω–≥–ª"],
    ["üåÄ –ú–∏–¥","üèπ ADC"],
    ["üßô –°–∞–ø–ø–æ—Ä—Ç"],
    ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
], resize_keyboard=True)

RANK_KB = ReplyKeyboardMarkup([
    ["ü•â Bronze","ü•à Silver"],
    ["ü•á Gold","üíé Platinum"],
    ["üü© Emerald","üî∑ Diamond"],
    ["‚≠ê Master","üëë Grandmaster","üèÜ Challenger"]
], resize_keyboard=True, one_time_keyboard=True)

TOURN_KB = ReplyKeyboardMarkup([
    ["üèÜ –ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤"],
    ["üé≤ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º"],
    ["üí• –ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞"],
    ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
], resize_keyboard=True)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ===
def init_files():
    if not os.path.exists(PARTICIPANTS_FILE):
        with open(PARTICIPANTS_FILE, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow(
                ["user_id","nick","roles","rank","opgg","discord","time"]
            )
    if not os.path.exists(TOURNAMENTS_FILE):
        with open(TOURNAMENTS_FILE, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerows([
                ["key","name","date","rules"],
                ["regions","–ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤","26 –∏—é–ª—è 2025, 18:00","üèÜ Bo5, –∫–æ–º–∞–Ω–¥—ã 5√ó5, –±–µ–∑ –±–∞–Ω–æ–≤"],
                ["random","–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º","27 –∏—é–ª—è 2025, 18:00","üé≤ Bo5, —Ä–∞–Ω–¥–æ–º –ø–æ MMR, —Å–º–µ–Ω–∞ —Ä–æ–ª–µ–π"],
                ["brawl","–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞","28 –∏—é–ª—è 2025, 18:00","üí• Bo5, –ø–æ 5 –±–∞–Ω–æ–≤"]
            ])

def read_csv(path):
    with open(path, "r", encoding="utf-8") as f:
        return list(csv.reader(f))

def write_csv(path, rows):
    with open(path, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerows(rows)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
def is_registered(user_id):
    try:
        for row in read_csv(PARTICIPANTS_FILE)[1:]:
            if row and row[0] == str(user_id):
                return True
    except FileNotFoundError:
        pass
    return False

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=MAIN_KB)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è ===
async def reg_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if is_registered(uid):
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=MAIN_KB)
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:", reply_markup=ReplyKeyboardRemove())
    return NICK

async def reg_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nick"] = update.message.text.strip()
    context.user_data["roles"] = []
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏:", reply_markup=ROLES_KB)
    return ROLE

async def reg_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
    if 'roles' not in context.user_data:
        context.user_data['roles'] = []
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data["roles"]:
            await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–Ω–≥:", reply_markup=RANK_KB)
        return RANK
    role = text.split(" ",1)[-1]
    if role not in context.user_data["roles"]:
        context.user_data["roles"].append(role)
        await update.message.reply_text(f"‚ûï –†–æ–ª—å ¬´{role}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    return ROLE

async def reg_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rank"] = update.message.text.split(" ",1)[-1]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Op.gg:", reply_markup=ReplyKeyboardRemove())
    return OPGG

async def reg_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["opgg"] = update.message.text.strip()
    await update.message.reply_text("–í–∞—à Discord (–Ω–∏–∫ –±–µ–∑ #):")
    return DISCORD

async def reg_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    data = context.user_data
    discord = update.message.text.strip().split("#",1)[0]
    # —á–∏—Ç–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º CSV
    rows = read_csv(PARTICIPANTS_FILE)
    rows = [r for r in rows if r and r[0]!=str(user.id)]
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    rows.append([
        str(user.id),
        data["nick"],
        ",".join(data["roles"]),
        data["rank"],
        data["opgg"],
        discord,
        now
    ])
    write_csv(PARTICIPANTS_FILE, rows)
    await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=MAIN_KB)
    return ConversationHandler.END

async def reg_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_KB)
    return ConversationHandler.END

# === –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(PARTICIPANTS_FILE)[1:]
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=MAIN_KB)
        return
    msg = "üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n\n"
    for i, r in enumerate(rows,1):
        msg += f"{i}. {r[1]} | {r[2]} | {r[3]}\n"
    await update.message.reply_text(msg, reply_markup=MAIN_KB)

# === –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(TOURNAMENTS_FILE)[1:]
    text = ""
    for _, name, _, rules in rows:
        text += f"üè∑Ô∏è <b>{name}</b>:\n{rules}\n\n"
    await update.message.reply_html(text, reply_markup=MAIN_KB)

# === –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def show_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(TOURNAMENTS_FILE)[1:]
    text = "<b>üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
    for _, name, date, _ in rows:
        text += f"üî∏ <b>{name}</b>: {date}\n"
    await update.message.reply_html(text, reply_markup=MAIN_KB)

# === –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å ===
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    buttons = [
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="edit")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="add")],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="clear")]
    ]
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(buttons))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω inline ===
async def admin_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data == "clear":
        write_csv(PARTICIPANTS_FILE, [["user_id","nick","roles","rank","opgg","discord","time"]])
        await query.message.reply_text("‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—á–∏—â–µ–Ω.")
        return
    rows = read_csv(TOURNAMENTS_FILE)
    if data == "edit":
        buttons = []
        for key, name, date, rules in rows[1:]:
            buttons.append([InlineKeyboardButton(name, callback_data=f"edit:{key}")])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:", reply_markup=InlineKeyboardMarkup(buttons))
    elif data.startswith("edit:"):
        key = data.split(":",1)[1]
        context.user_data["edit_key"] = key
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return EDIT_NAME
    elif data == "add":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞:")
        return ADD_KEY

# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ===
async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_key"]
    new = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r[0] == key:
            r[1] = new
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:")
    return EDIT_DATE

async def edit_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_key"]
    new = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r[0] == key:
            r[2] = new
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=MAIN_KB)
    return ConversationHandler.END

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ===
async def add_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_key"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return ADD_NAME

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞:")
    return ADD_DATE

async def add_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_date"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return ADD_RULES

async def add_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(TOURNAMENTS_FILE)
    rows.append([
        context.user_data["new_key"],
        context.user_data["new_name"],
        context.user_data["new_date"],
        update.message.text.strip()
    ])
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=MAIN_KB)
    return ConversationHandler.END

# === –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ===
def main():
    init_files()
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    reg_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$"), reg_start)],
        states={
            NICK:   [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_nick)],
            ROLE:   [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_role)],
            RANK:   [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_rank)],
            OPGG:   [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_opgg)],
            DISCORD:[MessageHandler(filters.TEXT & ~filters.COMMAND, reg_discord)],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), reg_cancel)]
    )

    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_cb)],
        states={
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
            EDIT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_date)],
            ADD_KEY:  [MessageHandler(filters.TEXT & ~filters.COMMAND, add_key)],
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            ADD_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_date)],
            ADD_RULES:[MessageHandler(filters.TEXT & ~filters.COMMAND, add_rules)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(reg_conv)
    app.add_handler(MessageHandler(filters.Regex("^üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$"), show_participants))
    app.add_handler(MessageHandler(filters.Regex("^üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_rules))
    app.add_handler(MessageHandler(filters.Regex("^üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_dates))
    app.add_handler(MessageHandler(filters.Regex("^‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$"), admin_panel))
    app.add_handler(admin_conv)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
```
