import os
import csv
from datetime import datetime
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackQueryHandler, ConversationHandler, ContextTypes
)

# === üîê –ß—Ç–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
ADMIN_ID = os.getenv("ADMIN_ID")
if not ADMIN_ID:
    raise RuntimeError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω ADMIN_ID –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
ADMIN_ID = int(ADMIN_ID)

# === üìÅ –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è ===
PARTICIPANTS_FILE = "participants.csv"
TOURNAMENTS_FILE = "tournaments.csv"

# === –®–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
NICK, ROLE, RANK, OP_GG, DISCORD = range(5)

# === –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu = ReplyKeyboardMarkup([
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "üìå –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"],
    ["üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤"]
], resize_keyboard=True)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV-—Ñ–∞–π–ª–æ–≤ ===
def init_files():
    if not os.path.exists(PARTICIPANTS_FILE):
        with open(PARTICIPANTS_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["user_id","nick","roles","rank","opgg","discord","time"])
    if not os.path.exists(TOURNAMENTS_FILE):
        with open(TOURNAMENTS_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["key","name","date","rules"])
            writer.writerow(["regions","–ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤","26 –∏—é–ª—è 2025, 18:00","üèÜ Bo5, –∫–æ–º–∞–Ω–¥—ã 5√ó5, –±–µ–∑ –±–∞–Ω–æ–≤"])
            writer.writerow(["random","–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º","27 –∏—é–ª—è 2025, 18:00","üé≤ Bo5, —Ä–∞–Ω–¥–æ–º –ø–æ MMR, —Å–º–µ–Ω–∞ —Ä–æ–ª–µ–π"])
            writer.writerow(["brawl","–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞","28 –∏—é–ª—è 2025, 18:00","üí• Bo5, –ø–æ 5 –±–∞–Ω–æ–≤"])


# === –£—Ç–∏–ª–∏—Ç—ã —Ä–∞–±–æ—Ç—ã —Å CSV ===
def read_csv(fname):
    with open(fname, "r", encoding="utf-8") as f:
        return list(csv.reader(f))

def write_csv(fname, rows):
    with open(fname, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerows(rows)


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return NICK

async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nick"] = update.message.text.strip()
    context.user_data["roles"] = []
    kb = [["üõ°Ô∏è –¢–æ–ø","üå≤ –î–∂–∞–Ω–≥–ª"],["üåÄ –ú–∏–¥","üèπ ADC"],["üßô –°–∞–ø–ø–æ—Ä—Ç"],["‚úÖ –ì–æ—Ç–æ–≤–æ"]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ —Ä–æ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))
    return ROLE

async def get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data["roles"]:
            await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE
        kb = [["ü•â Bronze","ü•à Silver"],["ü•á Gold","üíé Platinum"],["üü© Emerald","üî∑ Diamond"],["‚≠ê Master","üëë Grandmaster","üèÜ Challenger"]]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–∞–Ω–≥:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True))
        return RANK
    role = text.split(" ",1)[-1]
    if role not in context.user_data["roles"]:
        context.user_data["roles"].append(role)
        await update.message.reply_text(f"‚ûï –†–æ–ª—å ¬´{role}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"‚úîÔ∏è –†–æ–ª—å ¬´{role}¬ª —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞.")
    return ROLE

async def get_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rank"] = update.message.text.strip().split(" ",1)[-1]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Op.gg –ø—Ä–æ—Ñ–∏–ª—å:", reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
    return OP_GG

async def get_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["opgg"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Discord (–Ω–∏–∫ –±–µ–∑ #):")
    return DISCORD

async def get_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    discord = update.message.text.strip().split("#",1)[0]
    data["discord"] = discord
    user_id = update.effective_user.id
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    # –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ä—ã–µ
    rows = read_csv(PARTICIPANTS_FILE)
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
    rows = [r for r in rows if r and r[0] != str(user_id)]
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    rows.append([str(user_id), data["nick"], ",".join(data["roles"]), data["rank"], data["opgg"], discord, now])
    write_csv(PARTICIPANTS_FILE, rows)
    await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=main_menu)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)
    return ConversationHandler.END


# === –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(PARTICIPANTS_FILE)[1:]
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_menu)
        return
    msg = f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(rows)}\n\n"
    for i,r in enumerate(rows,1):
        msg += f"{i}. {r[1]} | {r[2]} | {r[3]}\n"
    await update.message.reply_text(msg, reply_markup=main_menu)


# === –ü—Ä–∞–≤–∏–ª–∞ –∏ –¥–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(TOURNAMENTS_FILE)[1:]
    text = ""
    for key,name,date,rules in rows:
        text += f"üè∑Ô∏è <b>{name}</b>\n{rules}\n\n"
    await update.message.reply_html(text, reply_markup=main_menu)

async def show_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(TOURNAMENTS_FILE)[1:]
    text = "üóì <b>–î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
    for key,name,date,rules in rows:
        text += f"üî∏ <b>{name}</b>: {date}\n"
    await update.message.reply_html(text, reply_markup=main_menu)


# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: Inline-–∫–Ω–æ–ø–∫–∏ ===
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    rows = read_csv(TOURNAMENTS_FILE)[1:]
    buttons = [
        [InlineKeyboardButton(f"{name} (‚úèÔ∏è)", callback_data=f"edit:{key}")]
        for key,name,date,rules in rows
    ]
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="add")])
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(buttons))


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ===
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    if data.startswith("edit:"):
        key = data.split(":",1)[1]
        context.user_data["t_key"] = key
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return 100
    # –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π
    if data == "add":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞:")
        return 200

    return ConversationHandler.END

async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["t_key"]
    new_name = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0] == key:
            r[1] = new_name
            break
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:")
    return 101

async def edit_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["t_key"]
    new_date = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0] == key:
            r[2] = new_date
            break
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞:")
    return 102

async def edit_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["t_key"]
    new_rules = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0] == key:
            r[3] = new_rules
            break
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=main_menu)
    return ConversationHandler.END

async def add_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = update.message.text.strip()
    context.user_data["new_key"] = key
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return 200

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞:")
    return 201

async def add_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_date"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return 202

async def add_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["new_key"]
    rows = read_csv(TOURNAMENTS_FILE)
    rows.append([ key,
                  context.user_data["new_name"],
                  context.user_data["new_date"],
                  update.message.text.strip() ])
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –ù–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=main_menu)
    return ConversationHandler.END


# === –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ /delete USER_ID ===
async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete USER_ID")
        return
    uid = context.args[0]
    rows = read_csv(PARTICIPANTS_FILE)
    new = [r for r in rows if r and r[0]!=uid]
    write_csv(PARTICIPANTS_FILE, new)
    await update.message.reply_text("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω.")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    init_files()
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è conversation
    reg_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$"), register_start)],
        states={
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nick)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_role)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rank)],
            OP_GG: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_opgg)],
            DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_discord)],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel)]
    )

    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_callback)],
        states={
            100: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
            101: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_date)],
            102: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_rules)],
            200: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_key)],
            201: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            202: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_date)],
            203: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_rules)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(reg_conv)
    app.add_handler(MessageHandler(filters.Regex("^üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$"), show_participants))
    app.add_handler(MessageHandler(filters.Regex("^üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_rules))
    app.add_handler(MessageHandler(filters.Regex("^üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_dates))
    app.add_handler(CommandHandler("admin", admin_panel))
    app.add_handler(admin_conv)
    app.add_handler(CommandHandler("delete", delete_user))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
