import os
import csv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)

# === üîë –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –¢–û–ö–ï–ù ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# === üë§ –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID ===
ADMIN_ID = os.getenv("ADMIN_ID")
if not ADMIN_ID:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
ADMIN_ID = int(ADMIN_ID)

# === üìÅ –§–ê–ô–õ–´ ===
PARTICIPANTS_FILE = "participants.csv"
TOURNAMENTS_FILE = "tournaments.csv"

# === üéØ –≠–¢–ê–ü–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
NICK, ROLE, RANK, OP_GG, DISCORD = range(5)

# === üéØ –ú–ï–ù–Æ ===
main_menu_kb = [
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"],
    ["üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"]
]
reply_menu = ReplyKeyboardMarkup(main_menu_kb, resize_keyboard=True)

# === –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í ===
def init_files():
    if not os.path.exists(PARTICIPANTS_FILE):
        with open(PARTICIPANTS_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])
        print("üìÅ –§–∞–π–ª participants.csv —Å–æ–∑–¥–∞–Ω")

    if not os.path.exists(TOURNAMENTS_FILE):
        with open(TOURNAMENTS_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞"])
            writer.writerow(["–ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤", "26 –∏—é–ª—è 2025, 18:00"])
            writer.writerow(["–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º", "27 –∏—é–ª—è 2025, 18:00"])
            writer.writerow(["–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞", "28 –∏—é–ª—è 2025, 18:00"])
        print("üìÅ –§–∞–π–ª tournaments.csv —Å–æ–∑–¥–∞–Ω")

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_menu
    )

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ===
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:", reply_markup=None)
    return NICK

async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nick'] = update.message.text

    role_kb = [
        ["üõ°Ô∏è –¢–æ–ø", "üå≤ –î–∂–∞–Ω–≥–ª"],
        ["üåÄ –ú–∏–¥", "üèπ ADC"],
        ["üßô –°–∞–ø–ø–æ—Ä—Ç"],
        ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
    ]
    markup = ReplyKeyboardMarkup(role_kb, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª:",
        reply_markup=markup
    )
    context.user_data['roles'] = []
    return ROLE

async def get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if 'roles' not in context.user_data:
        context.user_data['roles'] = []

    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data['roles']:
            await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE

        rank_kb = [
            ["ü•â Bronze", "ü•à Silver"],
            ["ü•á Gold", "üíé Platinum"],
            ["üü© Emerald", "üî∑ Diamond"],
            ["‚≠ê Master", "üëë Grandmaster", "üèÜ Challenger"]
        ]
        markup = ReplyKeyboardMarkup(rank_kb, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–Ω–≥:", reply_markup=markup)
        return RANK

    else:
        role = text.split(' ', 1)[-1]
        if role not in context.user_data['roles']:
            context.user_data['roles'].append(role)
            await update.message.reply_text(f"‚ûï –†–æ–ª—å '{role}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"‚úîÔ∏è –†–æ–ª—å '{role}' —É–∂–µ –µ—Å—Ç—å.")
        return ROLE

async def get_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rank'] = update.message.text
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Op.gg:")
    return OP_GG

async def get_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['opgg'] = update.message.text
    await update.message.reply_text("–í–∞—à Discord (–Ω–∞–ø—Ä–∏–º–µ—Ä: player#1234):")
    return DISCORD

async def get_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nick = context.user_data['nick']
    roles = ", ".join(context.user_data['roles'])
    rank = context.user_data['rank']
    opgg = context.user_data['opgg']
    discord = update.message.text.split('#')[0]
    user_id = update.effective_user.id
    time = datetime.now().strftime("%Y-%m-%d %H:%M")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    with open(PARTICIPANTS_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([user_id, nick, roles, rank, opgg, discord, time])

    await update.message.reply_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ, {nick}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
        "–ñ–¥—ë–º –≤–∞—Å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ!",
        reply_markup=reply_menu
    )
    return ConversationHandler.END

# === –°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í ===
async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
        
        if len(rows) <= 1:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=reply_menu)
            return
        
        message = f"üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(rows) - 1} —É—á–∞—Å—Ç–Ω–∏–∫(–∞)</b>:\n\n"
        for i, row in enumerate(rows[1:], start=1):
            if len(row) < 7: continue
            user_id, nick, roles, rank, opgg, discord, time = row
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É Op.gg
            if opgg.startswith('http'):
                url = opgg
            else:
                url = f"https://op.gg/summoners/{opgg.replace(' ', '%20')}"
            
            message += (
                f"{i}. üîπ <b>{nick}</b>\n"
                f"   ‚Ä¢ –†–æ–ª–∏: {roles}\n"
                f"   ‚Ä¢ –†–∞–Ω–≥: {rank}\n"
                f'   ‚Ä¢ <a href="{url}">üéÆ Op.gg</a>\n'
                f"   ‚Ä¢ Discord: <code>{discord}</code>\n\n"
            )
        
        await update.message.reply_html(message, disable_web_page_preview=True, reply_markup=reply_menu)
    
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_menu)

# === –î–ê–¢–ê –ü–†–û–í–ï–î–ï–ù–ò–Ø ===
async def show_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(TOURNAMENTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
        
        if len(rows) <= 1:
            await update.message.reply_text("üìÖ –ü–æ–∫–∞ –¥–∞—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=reply_menu)
            return
        
        message = "<b>üóì –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
        for row in rows[1:]:
            if len(row) >= 2:
                name, date = row[0], row[1]
                message += f"üî∏ <b>{name}</b>: {date}\n"
        
        await update.message.reply_html(message, reply_markup=reply_menu)
    
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª –¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_menu)

# === –ü–†–ê–í–ò–õ–ê –¢–£–†–ù–ò–†–û–í ===
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = """
üìú <b>–ü–†–ê–í–ò–õ–ê –¢–£–†–ù–ò–†–û–í</b>

<b>üèÜ –ë–ò–¢–í–ê –†–ï–ì–ò–û–ù–û–í</b>
1. –§–æ—Ä–º–∞—Ç: Best of Five (Bo5)
2. –ö–æ–º–∞–Ω–¥—ã: 2 –ø–æ 5 —á–µ–ª–æ–≤–µ–∫
3. –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –º–∞—Ç—á
4. –ë–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
5. –°–ø–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã

<b>üé≤ –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –†–ê–ù–î–û–ú</b>
1. –§–æ—Ä–º–∞—Ç: 5v5, Bo5
2. –ö–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –ø–æ MMR
3. –°–∏—Å—Ç–µ–º–∞ —Å–º–µ—â–µ–Ω–∏—è —Ä–æ–ª–µ–π
4. –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —á–µ–º–ø–∏–æ–Ω–æ–≤
5. –ë–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

<b>üí• –ì–†–ê–ù–î–ò–û–ó–ù–ê–Ø –ü–û–ë–û–ò–©–ù–ê–Ø –¢–£–°–û–í–ö–ê</b>
1. –§–æ—Ä–º–∞—Ç: Best of Five (Bo5)
2. –ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∏—Ç –ø–æ 5 —á–µ–º–ø–∏–æ–Ω–æ–≤
3. –ö–∞—Ä—Ç–∞: Summoner's Rift
4. –ü–µ—Ä–µ—Ä—ã–≤: 5 –º–∏–Ω—É—Ç
5. –í—Å–µ —Å–ø–æ—Ä—ã —Ä–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã
"""
    await update.message.reply_html(rules_text, reply_markup=reply_menu)

# === /setdate ‚Äî –£–°–¢–ê–ù–û–í–ò–¢–¨ –î–ê–¢–£ –¢–£–†–ù–ò–†–ê ===
async def setdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            "Usage: /setdate –ù–∞–∑–≤–∞–Ω–∏–µ_—Ç—É—Ä–Ω–∏—Ä–∞ –î–∞—Ç–∞_–∏_–≤—Ä–µ–º—è\n"
            "–ü—Ä–∏–º–µ—Ä: /setdate –ë–∏—Ç–≤–∞_—Ä–µ–≥–∏–æ–Ω–æ–≤ 30.07.2025_18:00"
        )
        return
    
    title = context.args[0].replace('_', ' ')
    date = ' '.join(context.args[1:])
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã
    tournaments = []
    try:
        with open(TOURNAMENTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            tournaments = list(reader)
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –§–∞–π–ª —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º
    updated = False
    for i, row in enumerate(tournaments):
        if len(row) >= 2 and row[0] == title:
            tournaments[i][1] = date
            updated = True
            break
    
    if not updated:
        tournaments.append([title, date])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(TOURNAMENTS_FILE, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerows(tournaments)
    
    await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n<b>{title}</b>: {date}", parse_mode="HTML")

# === /delete ‚Äî –£–î–ê–õ–ò–¢–¨ –£–ß–ê–°–¢–ù–ò–ö–ê ===
async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ User ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    user_id_to_delete = context.args[0]
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = []
    deleted = False
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            participants = list(reader)
    except FileNotFoundError:
        await update.message.reply_text("‚ùå –§–∞–π–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –£–¥–∞–ª—è–µ–º
    new_participants = []
    for row in participants:
        if len(row) > 0 and str(row[0]) == user_id_to_delete:
            deleted = True
        else:
            new_participants.append(row)
    
    if not deleted:
        await update.message.reply_text("–£—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    with open(PARTICIPANTS_FILE, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerows(new_participants)
    
    await update.message.reply_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —Å ID {user_id_to_delete} —É–¥–∞–ª—ë–Ω.")

# === –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–† ===
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("register", register_start),
            MessageHandler(filters.Text("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), register_start)
        ],
        states={
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nick)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_role)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rank)],
            OP_GG: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_opgg)],
            DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_discord)]
        },
        fallbacks=[]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ fallbacks, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–∞—à–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text("üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"), show_participants))
    application.add_handler(MessageHandler(filters.Text("üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"), show_dates))
    application.add_handler(MessageHandler(filters.Text("üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"), show_rules))
    application.add_handler(CommandHandler("setdate", setdate))
    application.add_handler(CommandHandler("delete", delete_user))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    init_files()
    application.run_polling()

if __name__ == "__main__":
    main()
