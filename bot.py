import os
import csv
from datetime import datetime

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("‚ùå –ù–µ—Ç BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
ADMIN_ID = os.getenv("ADMIN_ID")
if not ADMIN_ID:
    raise RuntimeError("‚ùå –ù–µ—Ç ADMIN_ID –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
ADMIN_ID = int(ADMIN_ID)

# === –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è ===
PARTICIPANTS_FILE = "participants.csv"
TOURNAMENTS_FILE = "tournaments.csv"

# === –®–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
NICK, ROLE, RANK, OPGG, DISCORD = range(5)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu_kb = [
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"],
    ["üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
]
MAIN_MENU = ReplyKeyboardMarkup(main_menu_kb, resize_keyboard=True)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ===
def init_files():
    if not os.path.exists(PARTICIPANTS_FILE):
        with open(PARTICIPANTS_FILE, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerow(
                ["user_id", "nick", "roles", "rank", "opgg", "discord", "time"]
            )
    if not os.path.exists(TOURNAMENTS_FILE):
        with open(TOURNAMENTS_FILE, "w", newline="", encoding="utf-8") as f:
            csv.writer(f).writerows([
                ["key","name","date","rules"],
                ["regions","–ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤","26 –∏—é–ª—è 2025, 18:00","üèÜ Bo5, –∫–æ–º–∞–Ω–¥—ã 5√ó5, –±–µ–∑ –±–∞–Ω–æ–≤"],
                ["random","–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º","27 –∏—é–ª—è 2025, 18:00","üé≤ Bo5, —Ä–∞–Ω–¥–æ–º –ø–æ MMR, —Å–º–µ–Ω–∞ —Ä–æ–ª–µ–π"],
                ["brawl","–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞","28 –∏—é–ª—è 2025, 18:00","üí• Bo5, –ø–æ 5 –±–∞–Ω–æ–≤"]
            ])

def read_csv(path):
    with open(path, "r", encoding="utf-8") as f:
        return list(csv.reader(f))

def write_csv(path, rows):
    with open(path, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerows(rows)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU
    )

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-–∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è ===
async def reg_start(update, context):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:", reply_markup=ReplyKeyboardRemove()
    )
    return NICK

async def reg_nick(update, context):
    context.user_data["nick"] = update.message.text.strip()
    # –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä —Ä–æ–ª–µ–π
    kb = [
        ["üõ°Ô∏è –¢–æ–ø", "üå≤ –î–∂–∞–Ω–≥–ª"],
        ["üåÄ –ú–∏–¥", "üèπ ADC"],
        ["üßô –°–∞–ø–ø–æ—Ä—Ç"],
        ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏ (–Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )
    context.user_data["roles"] = []
    return ROLE

async def reg_role(update, context):
    text = update.message.text.strip()
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data["roles"]:
            await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE
        # —Ä–∞–Ω–≥–∏
        kb = [
            ["ü•â Bronze", "ü•à Silver"],
            ["ü•á Gold", "üíé Platinum"],
            ["üü© Emerald", "üî∑ Diamond"],
            ["‚≠ê Master", "üëë Grandmaster", "üèÜ Challenger"]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–∞–Ω–≥:", 
            reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True)
        )
        return RANK
    # –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å
    role = text.split(" ",1)[-1]
    if role not in context.user_data["roles"]:
        context.user_data["roles"].append(role)
        await update.message.reply_text(f"‚ûï –†–æ–ª—å ¬´{role}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"‚úîÔ∏è –†–æ–ª—å ¬´{role}¬ª —É–∂–µ –µ—Å—Ç—å.")
    return ROLE

async def reg_rank(update, context):
    context.user_data["rank"] = update.message.text.strip().split(" ",1)[-1]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Op.gg:", reply_markup=ReplyKeyboardRemove())
    return OPGG

async def reg_opgg(update, context):
    context.user_data["opgg"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Discord (–Ω–∏–∫ –±–µ–∑ #):")
    return DISCORD

async def reg_discord(update, context):
    discord = update.message.text.strip().split("#",1)[0]
    data = context.user_data
    data["discord"] = discord
    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV
    rows = read_csv(PARTICIPANTS_FILE)
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –±—ã–ª–∞
    rows = [r for r in rows if r and r[0] != str(update.effective_user.id)]
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    rows.append([
        str(update.effective_user.id),
        data["nick"],
        ",".join(data["roles"]),
        data["rank"],
        data["opgg"],
        discord,
        now
    ])
    write_csv(PARTICIPANTS_FILE, rows)
    await update.message.reply_text("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def reg_cancel(update, context):
    await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# === –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def show_participants(update, context):
    rows = read_csv(PARTICIPANTS_FILE)[1:]
    if not rows:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=MAIN_MENU)
        return
    msg = f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(rows)}\n\n"
    for i,r in enumerate(rows,1):
        msg += f"{i}. {r[1]} | {r[2]} | {r[3]}\n"
    await update.message.reply_text(msg, reply_markup=MAIN_MENU)

# === –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def show_rules(update, context):
    rows = read_csv(TOURNAMENTS_FILE)[1:]
    text = "<b>üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
    for key,name,date,rules in rows:
        text += f"üè∑Ô∏è <b>{name}</b>:\n{rules}\n\n"
    await update.message.reply_html(text, reply_markup=MAIN_MENU)

# === –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def show_dates(update, context):
    rows = read_csv(TOURNAMENTS_FILE)[1:]
    text = "<b>üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
    for key,name,date,rules in rows:
        text += f"üî∏ <b>{name}</b>: {date}\n"
    await update.message.reply_html(text, reply_markup=MAIN_MENU)

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin_panel(update, context):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    rows = read_csv(TOURNAMENTS_FILE)[1:]
    buttons = []
    for key,name,date,rules in rows:
        buttons.append([
            InlineKeyboardButton(f"‚úèÔ∏è {name}", callback_data=f"edit:{key}"),
            InlineKeyboardButton("üóëÔ∏è", callback_data=f"del:{key}")
        ])
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="add")])
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(buttons))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline ===
# —Å–æ—Å—Ç–æ—è–Ω–∏—è 100..199 ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, 200..299 ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
async def admin_callback(update, context):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("edit:"):
        key = data.split(":",1)[1]
        context.user_data["edit_key"] = key
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return 100
    if data.startswith("del:"):
        key = data.split(":",1)[1]
        rows = read_csv(TOURNAMENTS_FILE)
        rows = [r for r in rows if not (r and r[0]==key)]
        write_csv(TOURNAMENTS_FILE, rows)
        await query.message.reply_text("üóë –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª—ë–Ω.")
        return ConversationHandler.END
    if data=="add":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π):")
        return 200
    return ConversationHandler.END

async def edit_name(update, context):
    key = context.user_data["edit_key"]
    new = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0]==key:
            r[1]=new
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:")
    return 101

async def edit_date(update, context):
    key = context.user_data["edit_key"]
    new = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0]==key:
            r[2]=new
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:")
    return 102

async def edit_rules(update, context):
    key = context.user_data["edit_key"]
    new = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0]==key:
            r[3]=new
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def add_key(update, context):
    context.user_data["new_key"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return 201

async def add_name(update, context):
    context.user_data["new_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞:")
    return 202

async def add_date(update, context):
    context.user_data["new_date"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return 203

async def add_rules(update, context):
    key = context.user_data["new_key"]
    name = context.user_data["new_name"]
    date = context.user_data["new_date"]
    rules = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    rows.append([key,name,date,rules])
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# === –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ===
async def del_user_cmd(update, context):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete USER_ID")
        return
    uid = context.args[0]
    rows = read_csv(PARTICIPANTS_FILE)
    rows = [r for r in rows if r and r[0]!=uid]
    write_csv(PARTICIPANTS_FILE, rows)
    await update.message.reply_text("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω.")

# === –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ ===
def main():
    init_files()
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è conv
    reg_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$"), reg_start)],
        states={
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_nick)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_role)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_rank)],
            OPGG: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_opgg)],
            DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_discord)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞|–û—Ç–º–µ–Ω–∞)$"), reg_cancel)],
        per_user=True
    )

    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_callback)],
        states={
            100: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
            101: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_date)],
            102: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_rules)],
            200: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_key)],
            201: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            202: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_date)],
            203: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_rules)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(reg_conv)
    app.add_handler(MessageHandler(filters.Regex("^üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$"), show_participants))
    app.add_handler(MessageHandler(filters.Regex("^üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_rules))
    app.add_handler(MessageHandler(filters.Regex("^üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_dates))
    app.add_handler(MessageHandler(filters.Regex("^‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$"), admin_panel))
    app.add_handler(admin_conv)
    app.add_handler(CommandHandler("delete", del_user_cmd))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
