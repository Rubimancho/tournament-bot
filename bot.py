import os
import csv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler, CallbackQueryHandler
)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8073753782:AAFEz9paFiPit-CAu6kRNabhppGe9nSFF9o"  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 1613707243  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
PARTICIPANTS_FILE = "participants.csv"
TOURNAMENTS_FILE = "tournaments.csv"

# === –≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
NICK, ROLE, RANK, OP_GG, DISCORD = range(5)

# === –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥—Ä–∞—Ñ—Ç–∞ ===
teams = {'A': [], 'B': []}

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu_keyboard = [
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üèÜ –ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤", "üé≤ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º"],
    ["üí• –ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞", "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"],
    ["üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "‚öîÔ∏è –ö–æ–º–∞–Ω–¥—ã"]  # ‚Üê –ö–Ω–æ–ø–∫–∞ "–ö–æ–º–∞–Ω–¥—ã" –¥–æ–±–∞–≤–ª–µ–Ω–∞
]
reply_menu = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ===
def init_files():
    if not os.path.exists(PARTICIPANTS_FILE):
        with open(PARTICIPANTS_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])

    if not os.path.exists(TOURNAMENTS_FILE):
        with open(TOURNAMENTS_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerows([
                ["–ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤", "26 –∏—é–ª—è 2025, 18:00"],
                ["–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º", "27 –∏—é–ª—è 2025, 18:00"],
                ["–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞", "28 –∏—é–ª—è 2025, 18:00"]
            ])

# === –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Ç–≤–æ–∏) ===
RULES_REGIONS = """
üèÜ –ë–ò–¢–í–ê –†–ï–ì–ò–û–ù–û–í

1. –§–æ—Ä–º–∞—Ç: Best of Five (Bo5) ‚Äî –ø–æ–±–µ–¥–∞ –∑–∞ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π, –≤—ã–∏–≥—Ä–∞–≤—à–µ–π 3 –∏–≥—Ä—ã.
2. –ö–æ–º–∞–Ω–¥—ã: 2 –∫–æ–º–∞–Ω–¥—ã –ø–æ 5 —á–µ–ª–æ–≤–µ–∫.
3. –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞:
   - –ü–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∏–≥—Ä–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã–±–∏—Ä–∞—é—Ç —Ä–µ–≥–∏–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –î–µ–º–∞—Ü–∏—è, –ù–æ–∫—Å—É—Å).
   - –ß–µ–º–ø–∏–æ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.
   - –û–¥–∏–Ω —Ä–µ–≥–∏–æ–Ω –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–≤–∞–∂–¥—ã.
4. –ë–∞–Ω—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
5. –ñ–µ—Ä–µ–±—å—ë–≤–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Ä–≤—ã–º.
6. –°–ø–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã.

üí° –°–æ–≤–µ—Ç: –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —á–µ–º–ø–∏–æ–Ω–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤!
"""

RULES_RANDOM = """
üé≤ –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –†–ê–ù–î–û–ú

1. –§–æ—Ä–º–∞—Ç: 5v5, Bo5 (–¥–æ 3 –ø–æ–±–µ–¥).
2. –ö–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –ø–æ MMR –¥–ª—è –±–∞–ª–∞–Ω—Å–∞.
3. –°–∏—Å—Ç–µ–º–∞ —Å–º–µ—â–µ–Ω–∏—è —Ä–æ–ª–µ–π:
   - –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã –∏–≥—Ä–æ–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∑–∏—Ü–∏—é:
     –¢–æ–ø ‚Üí –î–∂–∞–Ω–≥–ª ‚Üí –ú–∏–¥ ‚Üí ADC ‚Üí –°–∞–ø–ø–æ—Ä—Ç ‚Üí –¢–æ–ø...
4. –í—ã–±–æ—Ä —á–µ–º–ø–∏–æ–Ω–∞ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π (Random Draft).
5. –ë–∞–Ω—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.
6. –ó–∞–º–µ–Ω—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–æ—Ä—Å-–º–∞–∂–æ—Ä–µ.
7. –í—Å–µ —Å–ø–æ—Ä—ã —Ä–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã.

üí° –≠—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä ‚Äî –ø—Ä–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≤–µ—Å–µ–ª—å–µ!
"""

RULES_BRAWL = """
üí• –ì–†–ê–ù–î–ò–û–ó–ù–ê–Ø –ü–û–ë–û–ò–©–ù–ê–Ø –¢–£–°–û–í–ö–ê

1. –§–æ—Ä–º–∞—Ç: Best of Five (Bo5), –ø–æ–±–µ–¥–∞ ‚Äî –≤ 3 –∏–≥—Ä–∞—Ö.
2. –ö–æ–º–∞–Ω–¥—ã: 2 –ø–æ 5 —á–µ–ª–æ–≤–µ–∫.
3. –î—Ä–∞—Ñ—Ç:
   - –ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∏—Ç –ø–æ 5 —á–µ–º–ø–∏–æ–Ω–æ–≤ (–≤—Å–µ–≥–æ 10).
   - –ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —á–µ–º–ø–∏–æ–Ω–æ–≤ –Ω–µ–ª—å–∑—è –≤—ã–±–∏—Ä–∞—Ç—å –≤ –±—É–¥—É—â–∏—Ö –º–∞—Ç—á–∞—Ö.
4. –ö–∞—Ä—Ç–∞: Summoner's Rift.
5. –°—Ç–æ—Ä–æ–Ω–∞ –º–µ–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã.
6. –ü–µ—Ä–µ—Ä—ã–≤ –º–µ–∂–¥—É –∏–≥—Ä–∞–º–∏: 5 –º–∏–Ω—É—Ç.
7. –í—Å–µ —Å–ø–æ—Ä—ã —Ä–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã.

üî• –ì–æ—Ç–æ–≤—å—Å—è –∫ –Ω–∞—Å—Ç–æ—è—â–µ–π –±–∏—Ç–≤–µ!
"""

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_menu)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['roles'] = []
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:", reply_markup=None)
    return NICK

async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nick'] = update.message.text

    role_keyboard = [
        ["üõ°Ô∏è –¢–æ–ø", "üå≤ –î–∂–∞–Ω–≥–ª"],
        ["üåÄ –ú–∏–¥", "üèπ ADC"],
        ["üßô –°–∞–ø–ø–æ—Ä—Ç"],
        ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
    ]
    markup = ReplyKeyboardMarkup(role_keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ –≤—Å–µ —Ä–æ–ª–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –∏–≥—Ä–∞–µ—à—å.\n"
        "–ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª.",
        reply_markup=markup
    )
    return ROLE

async def get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data['roles']:
            await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE

        rank_keyboard = [
            ["‚ö´ –ë—Ä–æ–Ω–∑–∞", "‚ö™ –°–µ—Ä–µ–±—Ä–æ"],
            ["üü° –ó–æ–ª–æ—Ç–æ", "üîµ –ü–ª–∞—Ç–∏–Ω–∞"],
            ["üü£ –ò–∑—É–º—Ä—É–¥", "üî¥ –î–∏–∞–º–∞–Ω—Ç"],
            ["‚ö° –ú–∞—Å—Ç–µ—Ä", "üëë –ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä", "üèÜ –ß–µ–º–ø–∏–æ–Ω"]
        ]
        markup = ReplyKeyboardMarkup(rank_keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–Ω–≥:", reply_markup=markup)
        return RANK

    else:
        role = text.split(' ', 1)[-1]
        if role not in context.user_data['roles']:
            context.user_data['roles'].append(role)
            await update.message.reply_text(f"‚ûï –†–æ–ª—å '{role}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"‚úîÔ∏è –†–æ–ª—å '{role}' —É–∂–µ –µ—Å—Ç—å.")
        return ROLE

async def get_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_text = update.message.text
    rank = raw_text.split(' ', 1)[-1]
    context.user_data['rank'] = rank
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Op.gg:")
    return OP_GG

async def get_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['opgg'] = update.message.text
    await update.message.reply_text("–í–∞—à Discord (—Ç–æ–ª—å–∫–æ –Ω–∏–∫, –±–µ–∑ #):")
    return DISCORD

async def get_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    discord_nick = update.message.text.strip().split('#')[0]
    context.user_data['discord'] = discord_nick

    nick = context.user_data['nick']
    roles = ", ".join(context.user_data['roles'])
    rank = context.user_data['rank']
    opgg = context.user_data['opgg']
    user_id = update.effective_user.id
    time = datetime.now().strftime("%Y-%m-%d %H:%M")

    with open(PARTICIPANTS_FILE, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([user_id, nick, roles, rank, opgg, discord_nick, time])

    await update.message.reply_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ, {nick}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
        "–ñ–¥—ë–º –≤–∞—Å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ!",
        reply_markup=reply_menu
    )
    return ConversationHandler.END

# === –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def rules_regions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_REGIONS, reply_markup=reply_menu)

async def rules_random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_RANDOM, reply_markup=reply_menu)

async def rules_brawl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(RULES_BRAWL, reply_markup=reply_menu)

# === –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–ø–æ–ª–Ω—ã–π –∏ –∫—Ä–∞—Å–∏–≤—ã–π) ===
async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
        
        if len(rows) <= 1:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=reply_menu)
            return
        
        message = f"üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(rows) - 1} —É—á–∞—Å—Ç–Ω–∏–∫(–∞)</b>:\n\n"
        for i, row in enumerate(rows[1:], start=1):
            if len(row) < 7: continue
            user_id = row[0].strip('"')
            nick = row[1].strip('"')
            roles = row[2].strip('"')
            rank = row[3].strip('"')
            opgg = row[4].strip('"')
            discord = row[5].strip('"')
            time = row[6].strip('"')

            opgg_url = opgg if opgg.startswith('http') else f"https://op.gg/summoners/ {opgg.replace(' ', '%20')}"
            tg_link = f"tg://user?id={user_id}"

            message += (
                f"{i}. üîπ <b><a href='{tg_link}'>{nick}</a></b>\n"
                f"   ‚Ä¢ –†–æ–ª–∏: {roles}\n"
                f"   ‚Ä¢ –†–∞–Ω–≥: {rank}\n"
                f'   ‚Ä¢ <a href="{opgg_url}">üéÆ Op.gg</a>\n'
                f"   ‚Ä¢ üí¨ Discord: <code>{discord}</code>\n"
                f"   ‚Ä¢ ‚è∞ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {time}\n\n"
            )
        
        await update.message.reply_html(message, disable_web_page_preview=True, reply_markup=reply_menu)
    
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_menu)

# === –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è ===
def read_tournaments():
    try:
        with open(TOURNAMENTS_FILE, "r", encoding="utf-8") as f:
            return [row for row in csv.reader(f) if len(row) >= 2]
    except FileNotFoundError:
        return []

async def show_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tournaments = read_tournaments()
    if not tournaments:
        await update.message.reply_text("‚è≥ –î–∞—Ç—ã –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=reply_menu)
        return

    text = "<b>üóì –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
    for name, date in tournaments:
        text += f"üî∏ <b>{name}</b>: {date}\n"
    await update.message.reply_html(text, reply_markup=reply_menu)

# === /setdate ===
async def setdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    args = context.args
    if len(args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /setdate –ù–∞–∑–≤–∞–Ω–∏–µ_—Ç—É—Ä–Ω–∏—Ä–∞ –î–∞—Ç–∞_–∏_–≤—Ä–µ–º—è\n"
                                        "–ü—Ä–∏–º–µ—Ä: /setdate –§–∏–Ω–∞–ª 30.07.2025_18:00")
        return

    title = args[0].replace("_", " ")
    date = " ".join(args[1:]).replace("_", " ")

    tournaments = read_tournaments()
    updated = False
    for row in tournaments:
        if row[0].lower() == title.lower():
            row[1] = date
            updated = True
            break
    if not updated:
        tournaments.append([title, date])

    with open(TOURNAMENTS_FILE, "w", newline='', encoding="utf-8") as f:
        csv.writer(f).writerows(tournaments)
    await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:\n<b>{title}</b>: {date}", parse_mode="HTML")

# === /deletedate ===
async def deletedate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return

    args = context.args
    if not args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /deletedate –ù–∞–∑–≤–∞–Ω–∏–µ_—Ç—É—Ä–Ω–∏—Ä–∞\n–ü—Ä–∏–º–µ—Ä: /deletedate –§–∏–Ω–∞–ª")
        return

    title = " ".join(args).replace("_", " ").strip().lower()
    tournaments = read_tournaments()
    new_list = [row for row in tournaments if row[0].lower() != title]

    if len(new_list) == len(tournaments):
        await update.message.reply_text("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    with open(TOURNAMENTS_FILE, "w", newline='', encoding="utf-8") as f:
        csv.writer(f).writerows(new_list)
    await update.message.reply_text(f"üóë –¢—É—Ä–Ω–∏—Ä <b>{title}</b> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")

# === üß© –î–†–ê–§–¢ –ö–û–ú–ê–ù–î ===
async def get_participants_list():
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
        return [{"id": row[0], "nick": row[1].strip('"')} for row in rows[1:] if len(row) > 1]
    except FileNotFoundError:
        return []

async def draft_teams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–∞—Ñ—Ç.")
        return

    participants = await get_participants_list()
    if not participants:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –¥—Ä–∞—Ñ—Ç–∞.")
        return

    teams['A'].clear()
    teams['B'].clear()

    keyboard = [
        [InlineKeyboardButton("A", callback_data=f"team_a:{p['id']}:{p['nick']}"),
         InlineKeyboardButton("B", callback_data=f"team_b:{p['id']}:{p['nick']}")]
        for p in participants
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "<b>üìã –†–µ–∂–∏–º –¥—Ä–∞—Ñ—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É A –∏–ª–∏ B, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É.",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split(":", 2)
    if len(data) != 3:
        return

    team_key, user_id, nick = data
    team_name = 'A' if 'a' in team_key else 'B'

    if nick in teams['A'] or nick in teams['B']:
        await query.edit_message_text(text=f"‚ö†Ô∏è {nick} —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ!")
        return

    teams[team_name].append(nick)
    await query.edit_message_text(text=f"‚úÖ {nick} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Team {team_name}")

    # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    msg_a = "\n".join([f"‚Ä¢ {p}" for p in teams['A']]) if teams['A'] else "–ü—É—Å—Ç–æ"
    msg_b = "\n".join([f"‚Ä¢ {p}" for p in teams['B']]) if teams['B'] else "–ü—É—Å—Ç–æ"

    await query.message.reply_text(
        "<b>üìã –¢–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "<b>Team A</b>:\n" + msg_a + "\n\n"
        "<b>Team B</b>:\n" + msg_b,
        parse_mode="HTML"
    )

# === ‚öîÔ∏è –ö–Ω–æ–ø–∫–∞ "–ö–æ–º–∞–Ω–¥—ã" ===
async def show_teams(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg_a = "\n".join([f"‚Ä¢ {p}" for p in teams['A']]) if teams['A'] else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ"
    msg_b = "\n".join([f"‚Ä¢ {p}" for p in teams['B']]) if teams['B'] else "–ü–æ–∫–∞ –ø—É—Å—Ç–æ"

    await update.message.reply_text(
        "<b>üìã –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "<b>üî• Team A</b>:\n" + msg_a + "\n\n"
        "<b>üßä Team B</b>:\n" + msg_b,
        parse_mode="HTML"
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    init_files()
    app = Application.builder().token(TOKEN).build()

    # –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$"), register_start)],
        states={
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nick)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_role)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rank)],
            OP_GG: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_opgg)],
            DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_discord)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("setdate", setdate))
    app.add_handler(CommandHandler("deletedate", deletedate))
    app.add_handler(CommandHandler("draft", draft_teams))
    app.add_handler(CommandHandler("teams", show_teams))
    app.add_handler(CallbackQueryHandler(button_click))

    # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è$"), show_dates))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üèÜ –ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤$"), rules_regions))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üé≤ –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º$"), rules_random))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üí• –ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞$"), rules_brawl))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$"), show_participants))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("^‚öîÔ∏è –ö–æ–º–∞–Ω–¥—ã$"), show_teams))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()