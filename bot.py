import os
import csv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)

# === üîê –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

ADMIN_ID = os.getenv("ADMIN_ID")
if not ADMIN_ID:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
ADMIN_ID = int(ADMIN_ID)

# === –§–∞–π–ª—ã ===
PARTICIPANTS_FILE = "participants.csv"
TOURNAMENTS_FILE = "tournaments.csv"

# === –≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
NICK, ROLE, RANK, OPGG, DISCORD = range(5)

# === –ê–¥–º–∏–Ω-–∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏ ===
EDIT_NAME, EDIT_DATE, EDIT_RULES = 100, 101, 102
ADD_KEY, ADD_NAME, ADD_DATE, ADD_RULES = 200, 201, 202, 203

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu_kb = [
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤"],
    ["üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤", "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"]
]
MAIN_MENU = ReplyKeyboardMarkup(main_menu_kb, resize_keyboard=True)

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ ===
def init_files():
    # –£—á–∞—Å—Ç–Ω–∏–∫–∏
    if not os.path.exists(PARTICIPANTS_FILE):
        with open(PARTICIPANTS_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["user_id", "nick", "roles", "rank", "opgg", "discord", "time"])
        print("üìÅ participants.csv —Å–æ–∑–¥–∞–Ω")

    # –¢—É—Ä–Ω–∏—Ä—ã
    if not os.path.exists(TOURNAMENTS_FILE):
        with open(TOURNAMETS_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["key", "name", "date", "rules"])
            writer.writerows([
                ["regions", "–ë–∏—Ç–≤–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤", "26 –∏—é–ª—è 2025, 18:00", "üèÜ Bo5, –∫–æ–º–∞–Ω–¥—ã 5√ó5, –±–µ–∑ –±–∞–Ω–æ–≤"],
                ["random", "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —Ä–∞–Ω–¥–æ–º", "27 –∏—é–ª—è 2025, 18:00", "üé≤ Bo5, —Ä–∞–Ω–¥–æ–º –ø–æ MMR, —Å–º–µ–Ω–∞ —Ä–æ–ª–µ–π"],
                ["brawl", "–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–∞—è —Ç—É—Å–æ–≤–∫–∞", "28 –∏—é–ª—è 2025, 18:00", "üí• Bo5, –ø–æ 5 –±–∞–Ω–æ–≤"]
            ])
        print("üìÅ tournaments.csv —Å–æ–∑–¥–∞–Ω")

# === –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å CSV ===
def read_csv(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return list(csv.reader(f))
    except FileNotFoundError:
        return []

def write_csv(path, rows):
    with open(path, "w", newline="", encoding="utf-8") as f:
        csv.writer(f).writerows(rows)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
async def reg_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:", reply_markup=ReplyKeyboardRemove())
    return NICK

async def reg_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nick"] = update.message.text.strip()
    kb = [
        ["üõ°Ô∏è –¢–æ–ø", "üå≤ –î–∂–∞–Ω–≥–ª"],
        ["üåÄ –ú–∏–¥", "üèπ ADC"],
        ["üßô –°–∞–ø–ø–æ—Ä—Ç"],
        ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ), –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True)
    )
    context.user_data["roles"] = []
    return ROLE

async def reg_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data["roles"]:
            await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE
        kb = [
            ["ü•â Bronze", "ü•à Silver"],
            ["ü•á Gold", "üíé Platinum"],
            ["üü© Emerald", "üî∑ Diamond"],
            ["‚≠ê Master", "üëë Grandmaster", "üèÜ Challenger"]
        ]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ä–∞–Ω–≥:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True))
        return RANK
    role = text.split(" ", 1)[-1]
    if role not in context.user_data["roles"]:
        context.user_data["roles"].append(role)
        await update.message.reply_text(f"‚ûï –†–æ–ª—å ¬´{role}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"‚úîÔ∏è –†–æ–ª—å ¬´{role}¬ª —É–∂–µ –µ—Å—Ç—å.")
    return ROLE

async def reg_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw_text = update.message.text.strip()
    context.user_data["rank"] = raw_text.split(" ", 1)[-1]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Op.gg:", reply_markup=ReplyKeyboardRemove())
    return OPGG

async def reg_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["opgg"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Discord (–Ω–∏–∫ –±–µ–∑ #):")
    return DISCORD

async def reg_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    discord = update.message.text.strip().split("#", 1)[0]
    data = context.user_data
    data["discord"] = discord
    user_id = str(update.effective_user.id)
    now = datetime.now().strftime("%Y-%m-%d %H:%M")

    # –ß–∏—Ç–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    rows = read_csv(PARTICIPANTS_FILE)
    rows = [r for r in rows if r and r[0] != user_id]
    rows.append([user_id, data["nick"], ",".join(data["roles"]), data["rank"], data["opgg"], discord, now])
    write_csv(PARTICIPANTS_FILE, rows)

    await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=MAIN_MENU)
    return ConversationHandler.END

async def reg_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# === –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(PARTICIPANTS_FILE)
    if len(rows) <= 1:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=MAIN_MENU)
        return
    msg = "üìã <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏:</b>\n\n"
    for i, r in enumerate(rows[1:], start=1):
        if len(r) < 7: continue
        nick = r[1]
        roles = r[2].replace(",", ", ")
        rank = r[3]
        opgg = r[4]
        url = opgg if opgg.startswith("http") else f"https://op.gg/summoners/{opgg.replace(' ', '%20')}"
        msg += f"{i}. <b>{nick}</b> | {roles} | {rank}\n"
        msg += f'   ‚Ä¢ <a href="{url}">üéÆ Op.gg</a>\n\n'
    await update.message.reply_html(msg, disable_web_page_preview=True, reply_markup=MAIN_MENU)

# === –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def show_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(TOURNAMENTS_FILE)
    if len(rows) <= 1:
        await update.message.reply_text("üìÖ –ü–æ–∫–∞ –Ω–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤.", reply_markup=MAIN_MENU)
        return
    msg = "<b>üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
    for row in rows[1:]:
        if len(row) >= 3:
            msg += f"üî∏ <b>{row[1]}</b>: {row[2]}\n"
    await update.message.reply_html(msg, reply_markup=MAIN_MENU)

# === –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ ===
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rows = read_csv(TOURNAMENTS_FILE)
    if len(rows) <= 1:
        await update.message.reply_text("üìå –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª.", reply_markup=MAIN_MENU)
        return
    msg = "<b>üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>\n\n"
    for row in rows[1:]:
        if len(row) >= 4:
            msg += f"üè∑Ô∏è <b>{row[1]}</b>:\n{row[3]}\n\n"
    await update.message.reply_html(msg, reply_markup=MAIN_MENU)

# === /setdate ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞ (–ø–æ –∫–ª—é—á—É) ===
async def setdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("UsageId: /setdate [–∫–ª—é—á] [–¥–∞—Ç–∞]\n–ü—Ä–∏–º–µ—Ä: /setdate regions 30.07.2025 20:00")
        return
    key = context.args[0]
    date = " ".join(context.args[1:])
    rows = read_csv(TOURNAMENTS_FILE)
    updated = False
    for row in rows:
        if len(row) > 0 and row[0] == key:
            row[2] = date
            updated = True
    if updated:
        write_csv(TOURNAMENTS_FILE, rows)
        await update.message.reply_text(f"‚úÖ –î–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞ '{key}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {date}", reply_markup=MAIN_MENU)
    else:
        await update.message.reply_text("‚ùå –¢—É—Ä–Ω–∏—Ä —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=MAIN_MENU)

# === –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ===
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    rows = read_csv(TOURNAMENTS_FILE)
    if len(rows) <= 1:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤.", reply_markup=MAIN_MENU)
        return
    buttons = []
    for row in rows[1:]:
        if len(row) >= 2:
            key, name = row[0], row[1]
            buttons.append([
                InlineKeyboardButton(f"‚úèÔ∏è {name}", callback_data=f"edit:{key}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"del:{key}")
            ])
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="add")])
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(buttons))

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏–π ===
async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("edit:"):
        key = data.split(":", 1)[1]
        context.user_data["edit_key"] = key
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return EDIT_NAME

    elif data.startswith("del:"):
        key = data.split(":", 1)[1]
        rows = read_csv(TOURNAMENTS_FILE)
        rows = [r for r in rows if not (r and r[0] == key)]
        write_csv(TOURNAMENTS_FILE, rows)
        await query.message.reply_text("üóë –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=MAIN_MENU)
        return ConversationHandler.END

    elif data == "add":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–µ–π):")
        return ADD_KEY

# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ===
async def edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_key"]
    new = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0] == key:
            r[1] = new
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:")
    return EDIT_DATE

async def edit_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_key"]
    new = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0] == key:
            r[2] = new
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞:")
    return EDIT_RULES

async def edit_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["edit_key"]
    new = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    for r in rows:
        if r and r[0] == key:
            r[3] = new
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ ===
async def add_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_key"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return ADD_NAME

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞:")
    return ADD_DATE

async def add_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_date"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return ADD_RULES

async def add_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    key = context.user_data["new_key"]
    name = context.user_data["new_name"]
    date = context.user_data["new_date"]
    rules = update.message.text.strip()
    rows = read_csv(TOURNAMENTS_FILE)
    rows.append([key, name, date, rules])
    write_csv(TOURNAMENTS_FILE, rows)
    await update.message.reply_text("‚úÖ –¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=MAIN_MENU)
    return ConversationHandler.END

# === –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ===
async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    if not context.args:
        await update.message.reply_text("UsageId: /delete [user_id]")
        return
    uid = context.args[0]
    rows = read_csv(PARTICIPANTS_FILE)
    rows = [r for r in rows if r and r[0] != uid]
    write_csv(PARTICIPANTS_FILE, rows)
    await update.message.reply_text(f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ {uid} —É–¥–∞–ª—ë–Ω.", reply_markup=MAIN_MENU)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    init_files()
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    reg_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è$"), reg_start)],
        states={
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_nick)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_role)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_rank)],
            OPGG: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_opgg)],
            DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, reg_discord)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞|–û—Ç–º–µ–Ω–∞)$"), reg_cancel)],
        per_user=True
    )

    # –ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏
    admin_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_callback)],
        states={
            EDIT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_name)],
            EDIT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_date)],
            EDIT_RULES: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_rules)],
            ADD_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_key)],
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            ADD_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_date)],
            ADD_RULES: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_rules)],
        },
        fallbacks=[],
        per_user=True
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(reg_conv)
    app.add_handler(MessageHandler(filters.Regex("^üìÉ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤$"), show_participants))
    app.add_handler(MessageHandler(filters.Regex("^üìÖ –î–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_dates))
    app.add_handler(MessageHandler(filters.Regex("^üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤$"), show_rules))
    app.add_handler(MessageHandler(filters.Regex("^‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å$"), admin_panel))
    app.add_handler(admin_conv)
    app.add_handler(CommandHandler("setdate", setdate))
    app.add_handler(CommandHandler("delete", delete_user))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
