import os
import csv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

# === üîë –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –¢–û–ö–ï–ù ===
TOKEN = "–í–°–¢–ê–í–¨_–°–Æ–î–ê_–¢–û–ö–ï–ù"  # ‚Üê‚Üê‚Üê –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω!
# =============================

# === üë§ –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID ===
YOUR_USER_ID = 123456789  # ‚Üê‚Üê‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID
# ===========================

# === –≠—Ç–∞–ø—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
NICK, ROLE, RANK, OP_GG, DISCORD = range(5)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
main_menu_keyboard = [
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"]
]
reply_menu = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

# === –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ ===
def init_file():
    if not os.path.exists("participants.csv"):
        with open("participants.csv", "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=reply_menu)

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['roles'] = []
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º:", reply_markup=None)
    return NICK

# === –ù–∏–∫–Ω–µ–π–º ‚Üí —Ä–æ–ª–∏ ===
async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nick'] = update.message.text
    kb = [
        ["üõ°Ô∏è –¢–æ–ø", "üå≤ –î–∂–∞–Ω–≥–ª"],
        ["üåÄ –ú–∏–¥", "üèπ ADC"],
        ["üßô –°–∞–ø–ø–æ—Ä—Ç"],
        ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
    ]
    markup = ReplyKeyboardMarkup(kb, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=markup)
    return ROLE

# === –†–æ–ª–∏ ‚Äî ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û –ù–ê–í–°–ï–ì–î–ê ===
async def get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # ‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    if 'roles' not in context.user_
        context.user_data['roles'] = []

    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data['roles']:
            await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE
        await update.message.reply_text("–†–∞–Ω–≥:")
        return RANK

    role = text.split(' ', 1)[-1]
    if role not in context.user_data['roles']:
        context.user_data['roles'].append(role)
        await update.message.reply_text(f"‚ûï {role}")
    return ROLE

# === –†–∞–Ω–≥ ===
async def get_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rank'] = update.message.text
    await update.message.reply_text("Op.gg:")
    return OP_GG

# === Op.gg ===
async def get_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['opgg'] = update.message.text
    await update.message.reply_text("Discord (–Ω–∏–∫ –±–µ–∑ #):")
    return DISCORD

# === Discord + –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
async def get_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nick = context.user_data['nick']
    roles = ", ".join(context.user_data['roles'])
    rank = context.user_data['rank']
    opgg = context.user_data['opgg']
    discord = update.message.text.strip().split('#')[0]
    user_id = update.effective_user.id
    time = datetime.now().strftime("%Y-%m-%d %H:%M")

    with open('participants.csv', 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow([user_id, nick, roles, rank, opgg, discord, time])

    await update.message.reply_text(f"‚úÖ {nick}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=reply_menu)
    return ConversationHandler.END

# === –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open('participants.csv', 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            rows = list(reader)
        if len(rows) <= 1:
            await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=reply_menu)
            return
        msg = f"üìã –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(rows) - 1}\n\n"
        for i, row in enumerate(rows[1:], start=1):
            if len(row) < 7: continue
            nick = row[1].strip('"')
            roles = row[2].strip('"')
            rank = row[3].strip('"')
            opgg = row[4].strip('"')
            discord = row[5].strip('"')
            url = opgg if opgg.startswith('http') else f"https://op.gg/summoners/{opgg.replace(' ', '%20')}"
            msg += (
                f"{i}. üîπ {nick}\n"
                f"   ‚Ä¢ –†–æ–ª–∏: {roles}\n"
                f"   ‚Ä¢ –†–∞–Ω–≥: {rank}\n"
                f'   ‚Ä¢ <a href="{url}">Op.gg</a>\n'
                f"   ‚Ä¢ Discord: {discord}\n\n"
            )
        await update.message.reply_html(msg, disable_web_page_preview=True, reply_markup=reply_menu)
    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_menu)

# === –ó–∞–ø—É—Å–∫ ===
def main():
    init_file()
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex('^üìù'), register_start)],
        states={
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nick)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_role)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rank)],
            OP_GG: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_opgg)],
            DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_discord)],
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex('^üë•'), show_participants))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
