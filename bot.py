import os
import csv
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# === üîë –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –¢–û–ö–ï–ù ===
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# === üë§ –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô ID ===
ADMIN_ID = os.getenv("ADMIN_ID")
if not ADMIN_ID:
    raise ValueError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ADMIN_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
ADMIN_ID = int(ADMIN_ID)

# === üìÅ –§–ê–ô–õ–´ ===
PARTICIPANTS_FILE = "participants.csv"
TOURNAMENTS_FILE = "tournaments.csv"

# === üéØ –≠–¢–ê–ü–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
NICK, ROLE, RANK, OP_GG, DISCORD = range(5)

# === üéØ –ú–ï–ù–Æ ===
main_menu_kb = [
    ["üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"],
    ["üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", "üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"],
    ["üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"]
]
reply_menu = ReplyKeyboardMarkup(main_menu_kb, resize_keyboard=True)

# === –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í ===
def init_files():
    if not os.path.exists(PARTICIPANTS_FILE):
        with open(PARTICIPANTS_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])
        print("üìÅ –§–∞–π–ª participants.csv —Å–æ–∑–¥–∞–Ω")

    if not os.path.exists(TOURNAMENTS_FILE):
        with open(TOURNAMENTS_FILE, "w", newline='', encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞"])
        print("üìÅ –§–∞–π–ª tournaments.csv —Å–æ–∑–¥–∞–Ω")

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä!\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_menu
    )

# === –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò ===
async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) > 0 and str(user_id) == row[0]:
                    await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                    return ConversationHandler.END
    except FileNotFoundError:
        pass
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ –∏–≥—Ä–µ:", reply_markup=None)
    return NICK

async def get_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['nick'] = update.message.text

    role_kb = [
        ["üõ°Ô∏è –¢–æ–ø", "üå≤ –î–∂–∞–Ω–≥–ª"],
        ["üåÄ –ú–∏–¥", "üèπ ADC"],
        ["üßô –°–∞–ø–ø–æ—Ä—Ç"],
        ["‚úÖ –ì–æ—Ç–æ–≤–æ"]
    ]
    markup = ReplyKeyboardMarkup(role_kb, resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏ —Ä–æ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´‚úÖ –ì–æ—Ç–æ–≤–æ¬ª:",
        reply_markup=markup
    )
    context.user_data['roles'] = []
    return ROLE

async def get_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    if 'roles' not in context.user_data:
        context.user_data['roles'] = []

    if text == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        if not context.user_data['roles']:
            await update.message.reply_text("‚ö†Ô∏è –í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ä–æ–ª—å.")
            return ROLE

        rank_kb = [
            ["ü•â Bronze", "ü•à Silver"],
            ["ü•á Gold", "üíé Platinum"],
            ["üü© Emerald", "üî∑ Diamond"],
            ["‚≠ê Master", "üëë Grandmaster", "üèÜ Challenger"]
        ]
        markup = ReplyKeyboardMarkup(rank_kb, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ä–∞–Ω–≥:", reply_markup=markup)
        return RANK

    else:
        role = text.split(' ', 1)[-1]
        if role not in context.user_data['roles']:
            context.user_data['roles'].append(role)
            await update.message.reply_text(f"‚ûï –†–æ–ª—å '{role}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text(f"‚úîÔ∏è –†–æ–ª—å '{role}' —É–∂–µ –µ—Å—Ç—å.")
        return ROLE

async def get_rank(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['rank'] = update.message.text
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Op.gg:")
    return OP_GG

async def get_opgg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['opgg'] = update.message.text
    await update.message.reply_text("–í–∞—à Discord (–Ω–∞–ø—Ä–∏–º–µ—Ä: player#1234):")
    return DISCORD

async def get_discord(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nick = context.user_data['nick']
    roles = ", ".join(context.user_data['roles'])
    rank = context.user_data['rank']
    opgg = context.user_data['opgg']
    discord = update.message.text.split('#')[0]
    user_id = update.effective_user.id
    time = datetime.now().strftime("%Y-%m-%d %H:%M")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    with open(PARTICIPANTS_FILE, 'a', newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([user_id, nick, roles, rank, opgg, discord, time])

    await update.message.reply_text(
        f"üéâ –û—Ç–ª–∏—á–Ω–æ, {nick}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.\n"
        "–ñ–¥—ë–º –≤–∞—Å –Ω–∞ —Ç—É—Ä–Ω–∏—Ä–µ!",
        reply_markup=reply_menu
    )
    return ConversationHandler.END

# === –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–§–ò–õ–Ø ===
async def edit_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    participant = find_participant_by_id(user_id)
    if not participant:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    fields = {
        "nick": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º",
        "roles": "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª–∏",
        "rank": "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥",
        "opgg": "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å Op.gg",
        "discord": "–ò–∑–º–µ–Ω–∏—Ç—å Discord"
    }

    options = "\n".join([f"/edit_{k} ‚Äî {v}" for k, v in fields.items()])
    await update.message.reply_text(f"–í—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:\n{options}")

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    field_name = update.message.text.lstrip('/').split('_')[1]
    participant = find_participant_by_id(user_id)
    if not participant:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {getattr(participant, field_name)}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")
    context.user_data["field_to_edit"] = field_name
    return "WAITING_FOR_NEW_VALUE"

async def save_new_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    new_value = update.message.text
    field_name = context.user_data.pop("field_to_edit")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = load_participants()
    index = next((i for i, p in enumerate(participants) if p.user_id == user_id), None)
    if index is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞.")
        return ConversationHandler.END

    # –ò–∑–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    setattr(participants[index], field_name, new_value)
    save_participants(participants)

    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", reply_markup=reply_menu)
    return ConversationHandler.END

# === –ü–û–õ–ï–ó–ù–´–ï –ö–õ–ê–°–°–´ –ò –§–£–ù–ö–¶–ò–ò ===
class Participant:
    def __init__(self, data_row):
        self.user_id = data_row[0]
        self.nick = data_row[1]
        self.roles = data_row[2]
        self.rank = data_row[3]
        self.opgg = data_row[4]
        self.discord = data_row[5]
        self.time = data_row[6]

def load_participants():
    try:
        with open(PARTICIPANTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            return [Participant(row) for row in reader if len(row) == 7]
    except FileNotFoundError:
        return []

def save_participants(participants):
    with open(PARTICIPANTS_FILE, 'w', newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])
        for p in participants:
            writer.writerow([p.user_id, p.nick, p.roles, p.rank, p.opgg, p.discord, p.time])

def find_participant_by_id(user_id):
    participants = load_participants()
    return next((p for p in participants if p.user_id == str(user_id)), None)

# === –°–ü–ò–°–û–ö –£–ß–ê–°–¢–ù–ò–ö–û–í ===
async def show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE):
    participants = load_participants()
    if not participants:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", reply_markup=reply_menu)
        return

    message = f"üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫(–∞)</b>:\n\n"
    for idx, p in enumerate(participants, start=1):
        message += (
            f"{idx}. üîπ <b>{p.nick}</b>\n"
            f"   ‚Ä¢ –†–æ–ª–∏: {p.roles}\n"
            f"   ‚Ä¢ –†–∞–Ω–≥: {p.rank}\n"
            f'   ‚Ä¢ <a href="{format_opgg_link(p.opgg)}">üéÆ Op.gg</a>\n'
            f"   ‚Ä¢ Discord: <code>{p.discord}</code>\n\n"
        )
    
    await update.message.reply_html(message, disable_web_page_preview=True, reply_markup=reply_menu)

def format_opgg_link(opgg):
    if opgg.startswith('http'):
        return opgg
    else:
        return f"https://op.gg/summoners/{opgg.replace(' ', '%20')}"

# === –î–ê–¢–ê –ü–†–û–í–ï–î–ï–ù–ò–Ø ===
async def show_dates(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(TOURNAMENTS_FILE, 'r', encoding='utf-8') as f:
            reader = csv.reader(f)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            tournaments = list(reader)
    except FileNotFoundError:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.", reply_markup=reply_menu)
        return

    if not tournaments:
        await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.", reply_markup=reply_menu)
        return

    message = "<b>üóìÔ∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:</b>\n\n"
    for idx, (name, date) in enumerate(tournaments, start=1):
        message += f"{idx}. ‚¨£Ô∏è <b>{name}:</b> {date}\n"

    await update.message.reply_html(message, reply_markup=reply_menu)

# === –ü–†–ê–í–ò–õ–ê –¢–£–†–ù–ò–†–û–í ===
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rules_text = """
üìú <b>–ü–†–ê–í–ò–õ–ê –¢–£–†–ù–ò–†–û–í</b>

<b>üèÜ –ë–ò–¢–í–ê –†–ï–ì–ò–û–ù–û–í</b>
1. –§–æ—Ä–º–∞—Ç: Best of Five (Bo5)
2. –ö–æ–º–∞–Ω–¥—ã: 2 –ø–æ 5 —á–µ–ª–æ–≤–µ–∫
3. –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞: —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ –º–∞—Ç—á
4. –ë–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
5. –°–ø–æ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ä–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã

<b>üé≤ –ì–û–õ–õ–ê–ù–î–°–ö–ò–ô –†–ê–ù–î–û–ú</b>
1. –§–æ—Ä–º–∞—Ç: 5v5, Bo5
2. –ö–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –ø–æ MMR
3. –°–∏—Å—Ç–µ–º–∞ —Å–º–µ—â–µ–Ω–∏—è —Ä–æ–ª–µ–π
4. –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —á–µ–º–ø–∏–æ–Ω–æ–≤
5. –ë–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

<b>üí• –ì–†–ê–ù–î–ò–û–ó–ù–ê–Ø –ü–û–ë–û–ò–©–ù–ê–Ø –¢–£–°–û–í–ö–ê</b>
1. –§–æ—Ä–º–∞—Ç: Best of Five (Bo5)
2. –ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–∞–Ω–∏—Ç –ø–æ 5 —á–µ–º–ø–∏–æ–Ω–æ–≤
3. –ö–∞—Ä—Ç–∞: Summoner's Rift
4. –ü–µ—Ä–µ—Ä—ã–≤: 5 –º–∏–Ω—É—Ç
5. –í—Å–µ —Å–ø–æ—Ä—ã —Ä–µ—à–∞—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã
"""
    await update.message.reply_html(rules_text, reply_markup=reply_menu)

# === –ö–û–ú–ê–ù–î–ê –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –í–°–ï–• –£–ß–ê–°–¢–ù–ò–ö–û–í ===
async def clean_all_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")
        return
    
    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    with open(PARTICIPANTS_FILE, 'w', newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["User ID", "–ù–∏–∫–Ω–µ–π–º", "–†–æ–ª–∏", "–†–∞–Ω–≥", "Op.gg", "Discord", "–í—Ä–µ–º—è"])

    await update.message.reply_text("–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

# === –ö–û–ú–ê–ù–î–ê –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –¢–£–†–ù–ò–†–ê ===
EDITOR_STATE_NAME, EDITOR_STATE_DATE = range(2)

async def edit_tournament(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")
        return
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:")
    return EDITOR_STATE_NAME

async def edit_tournament_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tourney_name = update.message.text.strip()
    context.user_data['tourney_name'] = tourney_name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—É—Ä–Ω–∏—Ä–∞ (–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì —á—á:–º–º):")
    return EDITOR_STATE_DATE

async def edit_tournament_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tourney_date = update.message.text.strip()
    tourney_name = context.user_data.pop('tourney_name')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä –≤ —Ñ–∞–π–ª
    with open(TOURNAMENTS_FILE, 'a', newline='', encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([tourney_name, tourney_date])

    await update.message.reply_text(f"–¢—É—Ä–Ω–∏—Ä '{tourney_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–∞—Ç–æ–π {tourney_date}.")
    return ConversationHandler.END

# === –ö–û–ú–ê–ù–î–ê –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –ü–†–û–®–ï–î–®–ò–• –¢–£–†–ù–ò–†–û–í ===
async def delete_past_tournaments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.")
        return
    
    now = datetime.now()
    cleaned_tournaments = []

    try:
        with open(TOURNAMENTS_FILE, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            for row in reader:
                if len(row) >= 2:
                    name, date_str = row[0], row[1]
                    
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    event_date = datetime.strptime(date_str, "%Y-%m-%d %H:%M")
                    
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –±—É–¥—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
                    if event_date > now:
                        cleaned_tournaments.append(row)
                
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –±—É–¥—É—â–∏–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
        with open(TOURNAMENTS_FILE, 'w', newline='', encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–î–∞—Ç–∞"])  # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            writer.writerows(cleaned_tournaments)
    
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")
        return

    await update.message.reply_text("–ü—Ä–æ—à–µ–¥—à–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

# === –û–°–ù–û–í–ù–û–ô –•–≠–ù–î–õ–ï–† ===
def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conv_register_handler = ConversationHandler(
        entry_points=[
            CommandHandler("register", register_start),
            MessageHandler(filters.Text("üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"), register_start)
        ],
        states={
            NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_nick)],
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_role)],
            RANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rank)],
            OP_GG: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_opgg)],
            DISCORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_discord)]
        },
        fallbacks=[]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ fallbacks, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–∞—à–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    conv_edit_handler = ConversationHandler(
        entry_points=[CommandHandler("edit_profile", edit_profile)],
        states={
            "WAITING_FOR_NEW_VALUE": [MessageHandler(filters.TEXT & ~filters.COMMAND, save_new_value)]
        },
        fallbacks=[CommandHandler("edit_profile", edit_profile)],  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        per_message=True
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
    conv_edit_tournament_handler = ConversationHandler(
        entry_points=[CommandHandler("edit_tournament", edit_tournament)],
        states={
            EDITOR_STATE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_tournament_name)],
            EDITOR_STATE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_tournament_date)]
        },
        fallbacks=[]  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ fallbacks, —Ç–∞–∫ –∫–∞–∫ –≤ –Ω–∞—à–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤—ã—Ö–æ–¥–∞
    )

    application.add_handler(conv_register_handler)
    application.add_handler(conv_edit_handler)
    application.add_handler(conv_edit_tournament_handler)
    application.add_handler(CommandHandler("clean_all_users", clean_all_users))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ—á–∏—Å—Ç–æ–∫
    application.add_handler(CommandHandler("delete_past_tournaments", delete_past_tournaments))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    application.add_handler(MessageHandler(filters.Text("üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"), show_participants))
    application.add_handler(MessageHandler(filters.Text("üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è"), show_dates))
    application.add_handler(MessageHandler(filters.Text("üìú –ü—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"), show_rules))
    application.add_handler(CommandHandler("start", start))

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –º–µ—Ç–æ–¥–æ–º run_polling()
    init_files()
    application.run_polling()

if __name__ == "__main__":
    main()
